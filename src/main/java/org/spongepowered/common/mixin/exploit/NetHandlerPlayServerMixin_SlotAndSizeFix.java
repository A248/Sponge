package org.spongepowered.common.mixin.exploit;

import net.minecraft.entity.player.EntityPlayerMP;
import net.minecraft.inventory.ClickType;
import net.minecraft.inventory.Container;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.network.NetHandlerPlayServer;
import net.minecraft.network.play.client.CPacketClickWindow;
import net.minecraft.util.text.TextComponentString;
import org.spongepowered.api.item.inventory.Slot;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
import org.spongepowered.common.SpongeImpl;
import org.spongepowered.common.bridge.inventory.ContainerBridge;

@Mixin(NetHandlerPlayServer.class)
public abstract class NetHandlerPlayServerMixin_SlotAndSizeFix {

    // @formatter:off
    @Shadow public EntityPlayerMP player;
    // @formatter:on

    @Inject(method = "processClickWindow", at = @At(value = "INVOKE", target = "Lnet/minecraft/entity/player/EntityPlayerMP;markPlayerActive()V"), cancellable = true)
    private void exploit$preventSlotAndSizeExploit(final CPacketClickWindow packet, final CallbackInfo ci) {
        final Container container = this.player.inventoryContainer;
        final Slot slot = ((ContainerBridge) container).bridge$getContainerSlot(packet.getSlotId());
        if (slot == null) {
            this.player.connection.disconnect(new TextComponentString("Illegal slot interaction detected!"));
            SpongeImpl.getLogger().warn("Player '{}' is attempting an illegal slot interaction!", player.getName());
            ci.cancel();
            return;
        }

        final ClickType clickType = packet.getClickType();
        if (clickType == ClickType.PICKUP || clickType == ClickType.PICKUP_ALL || clickType == ClickType.THROW) {
            final ItemStack stack = packet.getClickedItem();
            final NBTTagCompound compound = stack.getTagCompound();
            if (compound != null) {
                final int size = compound.getSize();
                final int allowedSize = SpongeImpl.getGlobalConfigAdapter().getConfig().getExploits().getMaxSlotDataInteraction();
                if (size > allowedSize) {
                    this.player.connection.disconnect(new TextComponentString("Illegal ItemStack data size!"));
                    SpongeImpl.getLogger().warn("Player '{}' is attempting to send illegal ItemStack data sizes. Size sent: {}, size allowed: {}!",
                        size, player.getName(), allowedSize);
                    ci.cancel();
                }
            }
        }
    }
}
