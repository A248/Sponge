/*
 * This file is part of Sponge, licensed under the MIT License (MIT).
 *
 * Copyright (c) SpongePowered <https://www.spongepowered.org>
 * Copyright (c) contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.spongepowered.common.registry.builtin.vanilla;

import net.minecraft.util.SoundEvents;
import org.spongepowered.api.effect.sound.SoundType;
import org.spongepowered.common.registry.SpongeCatalogRegistry;

public final class SoundEventSupplier {

    private SoundEventSupplier() {
    }

    public static void registerSuppliers(final SpongeCatalogRegistry registry) {
        registry
            .registerSupplier(SoundType.class, "ambient.basalt_deltas.additions", () -> (SoundType) SoundEvents.AMBIENT_BASALT_DELTAS_ADDITIONS)
            .registerSupplier(SoundType.class, "ambient.basalt_deltas.loop", () -> (SoundType) SoundEvents.AMBIENT_BASALT_DELTAS_LOOP)
            .registerSupplier(SoundType.class, "ambient.basalt_deltas.mood", () -> (SoundType) SoundEvents.AMBIENT_BASALT_DELTAS_MOOD)
            .registerSupplier(SoundType.class, "ambient.cave", () -> (SoundType) SoundEvents.AMBIENT_CAVE)
            .registerSupplier(SoundType.class, "ambient.crimson_forest.additions", () -> (SoundType) SoundEvents.AMBIENT_CRIMSON_FOREST_ADDITIONS)
            .registerSupplier(SoundType.class, "ambient.crimson_forest.loop", () -> (SoundType) SoundEvents.AMBIENT_CRIMSON_FOREST_LOOP)
            .registerSupplier(SoundType.class, "ambient.crimson_forest.mood", () -> (SoundType) SoundEvents.AMBIENT_CRIMSON_FOREST_MOOD)
            .registerSupplier(SoundType.class, "ambient.nether_wastes.additions", () -> (SoundType) SoundEvents.AMBIENT_NETHER_WASTES_ADDITIONS)
            .registerSupplier(SoundType.class, "ambient.nether_wastes.loop", () -> (SoundType) SoundEvents.AMBIENT_NETHER_WASTES_LOOP)
            .registerSupplier(SoundType.class, "ambient.nether_wastes.mood", () -> (SoundType) SoundEvents.AMBIENT_NETHER_WASTES_MOOD)
            .registerSupplier(SoundType.class, "ambient.soul_sand_valley.additions", () -> (SoundType) SoundEvents.AMBIENT_SOUL_SAND_VALLEY_ADDITIONS)
            .registerSupplier(SoundType.class, "ambient.soul_sand_valley.loop", () -> (SoundType) SoundEvents.AMBIENT_SOUL_SAND_VALLEY_LOOP)
            .registerSupplier(SoundType.class, "ambient.soul_sand_valley.mood", () -> (SoundType) SoundEvents.AMBIENT_SOUL_SAND_VALLEY_MOOD)
            .registerSupplier(SoundType.class, "ambient.underwater.enter", () -> (SoundType) SoundEvents.AMBIENT_UNDERWATER_ENTER)
            .registerSupplier(SoundType.class, "ambient.underwater.exit", () -> (SoundType) SoundEvents.AMBIENT_UNDERWATER_EXIT)
            .registerSupplier(SoundType.class, "ambient.underwater.loop", () -> (SoundType) SoundEvents.AMBIENT_UNDERWATER_LOOP)
            .registerSupplier(SoundType.class, "ambient.underwater.loop.additions", () -> (SoundType) SoundEvents.AMBIENT_UNDERWATER_LOOP_ADDITIONS)
            .registerSupplier(SoundType.class, "ambient.underwater.loop.additions.rare", () -> (SoundType) SoundEvents.AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE)
            .registerSupplier(SoundType.class, "ambient.underwater.loop.additions.ultra_rare", () -> (SoundType) SoundEvents.AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE)
            .registerSupplier(SoundType.class, "ambient.warped_forest.additions", () -> (SoundType) SoundEvents.AMBIENT_WARPED_FOREST_ADDITIONS)
            .registerSupplier(SoundType.class, "ambient.warped_forest.loop", () -> (SoundType) SoundEvents.AMBIENT_WARPED_FOREST_LOOP)
            .registerSupplier(SoundType.class, "ambient.warped_forest.mood", () -> (SoundType) SoundEvents.AMBIENT_WARPED_FOREST_MOOD)
            .registerSupplier(SoundType.class, "block.ancient_debris.break", () -> (SoundType) SoundEvents.ANCIENT_DEBRIS_BREAK)
            .registerSupplier(SoundType.class, "block.ancient_debris.fall", () -> (SoundType) SoundEvents.ANCIENT_DEBRIS_FALL)
            .registerSupplier(SoundType.class, "block.ancient_debris.hit", () -> (SoundType) SoundEvents.ANCIENT_DEBRIS_HIT)
            .registerSupplier(SoundType.class, "block.ancient_debris.place", () -> (SoundType) SoundEvents.ANCIENT_DEBRIS_PLACE)
            .registerSupplier(SoundType.class, "block.ancient_debris.step", () -> (SoundType) SoundEvents.ANCIENT_DEBRIS_STEP)
            .registerSupplier(SoundType.class, "block.anvil.break", () -> (SoundType) SoundEvents.ANVIL_BREAK)
            .registerSupplier(SoundType.class, "block.anvil.destroy", () -> (SoundType) SoundEvents.ANVIL_DESTROY)
            .registerSupplier(SoundType.class, "block.anvil.fall", () -> (SoundType) SoundEvents.ANVIL_FALL)
            .registerSupplier(SoundType.class, "block.anvil.hit", () -> (SoundType) SoundEvents.ANVIL_HIT)
            .registerSupplier(SoundType.class, "block.anvil.land", () -> (SoundType) SoundEvents.ANVIL_LAND)
            .registerSupplier(SoundType.class, "block.anvil.place", () -> (SoundType) SoundEvents.ANVIL_PLACE)
            .registerSupplier(SoundType.class, "block.anvil.step", () -> (SoundType) SoundEvents.ANVIL_STEP)
            .registerSupplier(SoundType.class, "block.anvil.use", () -> (SoundType) SoundEvents.ANVIL_USE)
            .registerSupplier(SoundType.class, "block.bamboo.break", () -> (SoundType) SoundEvents.BAMBOO_BREAK)
            .registerSupplier(SoundType.class, "block.bamboo.fall", () -> (SoundType) SoundEvents.BAMBOO_FALL)
            .registerSupplier(SoundType.class, "block.bamboo.hit", () -> (SoundType) SoundEvents.BAMBOO_HIT)
            .registerSupplier(SoundType.class, "block.bamboo.place", () -> (SoundType) SoundEvents.BAMBOO_PLACE)
            .registerSupplier(SoundType.class, "block.bamboo.step", () -> (SoundType) SoundEvents.BAMBOO_STEP)
            .registerSupplier(SoundType.class, "block.bamboo_sapling.break", () -> (SoundType) SoundEvents.BAMBOO_SAPLING_BREAK)
            .registerSupplier(SoundType.class, "block.bamboo_sapling.hit", () -> (SoundType) SoundEvents.BAMBOO_SAPLING_HIT)
            .registerSupplier(SoundType.class, "block.bamboo_sapling.place", () -> (SoundType) SoundEvents.BAMBOO_SAPLING_PLACE)
            .registerSupplier(SoundType.class, "block.barrel.close", () -> (SoundType) SoundEvents.BARREL_CLOSE)
            .registerSupplier(SoundType.class, "block.barrel.open", () -> (SoundType) SoundEvents.BARREL_OPEN)
            .registerSupplier(SoundType.class, "block.basalt.break", () -> (SoundType) SoundEvents.BASALT_BREAK)
            .registerSupplier(SoundType.class, "block.basalt.fall", () -> (SoundType) SoundEvents.BASALT_FALL)
            .registerSupplier(SoundType.class, "block.basalt.hit", () -> (SoundType) SoundEvents.BASALT_HIT)
            .registerSupplier(SoundType.class, "block.basalt.place", () -> (SoundType) SoundEvents.BASALT_PLACE)
            .registerSupplier(SoundType.class, "block.basalt.step", () -> (SoundType) SoundEvents.BASALT_STEP)
            .registerSupplier(SoundType.class, "block.beacon.activate", () -> (SoundType) SoundEvents.BEACON_ACTIVATE)
            .registerSupplier(SoundType.class, "block.beacon.ambient", () -> (SoundType) SoundEvents.BEACON_AMBIENT)
            .registerSupplier(SoundType.class, "block.beacon.deactivate", () -> (SoundType) SoundEvents.BEACON_DEACTIVATE)
            .registerSupplier(SoundType.class, "block.beacon.power_select", () -> (SoundType) SoundEvents.BEACON_POWER_SELECT)
            .registerSupplier(SoundType.class, "block.beehive.drip", () -> (SoundType) SoundEvents.BEEHIVE_DRIP)
            .registerSupplier(SoundType.class, "block.beehive.enter", () -> (SoundType) SoundEvents.BEEHIVE_ENTER)
            .registerSupplier(SoundType.class, "block.beehive.exit", () -> (SoundType) SoundEvents.BEEHIVE_EXIT)
            .registerSupplier(SoundType.class, "block.beehive.shear", () -> (SoundType) SoundEvents.BEEHIVE_SHEAR)
            .registerSupplier(SoundType.class, "block.beehive.work", () -> (SoundType) SoundEvents.BEEHIVE_WORK)
            .registerSupplier(SoundType.class, "block.bell.resonate", () -> (SoundType) SoundEvents.BELL_RESONATE)
            .registerSupplier(SoundType.class, "block.bell.use", () -> (SoundType) SoundEvents.BELL_BLOCK)
            .registerSupplier(SoundType.class, "block.blastfurnace.fire_crackle", () -> (SoundType) SoundEvents.BLASTFURNACE_FIRE_CRACKLE)
            .registerSupplier(SoundType.class, "block.bone_block.break", () -> (SoundType) SoundEvents.BONE_BLOCK_BREAK)
            .registerSupplier(SoundType.class, "block.bone_block.fall", () -> (SoundType) SoundEvents.BONE_BLOCK_FALL)
            .registerSupplier(SoundType.class, "block.bone_block.hit", () -> (SoundType) SoundEvents.BONE_BLOCK_HIT)
            .registerSupplier(SoundType.class, "block.bone_block.place", () -> (SoundType) SoundEvents.BONE_BLOCK_PLACE)
            .registerSupplier(SoundType.class, "block.bone_block.step", () -> (SoundType) SoundEvents.BONE_BLOCK_STEP)
            .registerSupplier(SoundType.class, "block.brewing_stand.brew", () -> (SoundType) SoundEvents.BREWING_STAND_BREW)
            .registerSupplier(SoundType.class, "block.bubble_column.bubble_pop", () -> (SoundType) SoundEvents.BUBBLE_COLUMN_BUBBLE_POP)
            .registerSupplier(SoundType.class, "block.bubble_column.upwards_ambient", () -> (SoundType) SoundEvents.BUBBLE_COLUMN_UPWARDS_AMBIENT)
            .registerSupplier(SoundType.class, "block.bubble_column.upwards_inside", () -> (SoundType) SoundEvents.BUBBLE_COLUMN_UPWARDS_INSIDE)
            .registerSupplier(SoundType.class, "block.bubble_column.whirlpool_ambient", () -> (SoundType) SoundEvents.BUBBLE_COLUMN_WHIRLPOOL_AMBIENT)
            .registerSupplier(SoundType.class, "block.bubble_column.whirlpool_inside", () -> (SoundType) SoundEvents.BUBBLE_COLUMN_WHIRLPOOL_INSIDE)
            .registerSupplier(SoundType.class, "block.campfire.crackle", () -> (SoundType) SoundEvents.CAMPFIRE_CRACKLE)
            .registerSupplier(SoundType.class, "block.chain.break", () -> (SoundType) SoundEvents.CHAIN_BREAK)
            .registerSupplier(SoundType.class, "block.chain.fall", () -> (SoundType) SoundEvents.CHAIN_FALL)
            .registerSupplier(SoundType.class, "block.chain.hit", () -> (SoundType) SoundEvents.CHAIN_HIT)
            .registerSupplier(SoundType.class, "block.chain.place", () -> (SoundType) SoundEvents.CHAIN_PLACE)
            .registerSupplier(SoundType.class, "block.chain.step", () -> (SoundType) SoundEvents.CHAIN_STEP)
            .registerSupplier(SoundType.class, "block.chest.close", () -> (SoundType) SoundEvents.CHEST_CLOSE)
            .registerSupplier(SoundType.class, "block.chest.locked", () -> (SoundType) SoundEvents.CHEST_LOCKED)
            .registerSupplier(SoundType.class, "block.chest.open", () -> (SoundType) SoundEvents.CHEST_OPEN)
            .registerSupplier(SoundType.class, "block.chorus_flower.death", () -> (SoundType) SoundEvents.CHORUS_FLOWER_DEATH)
            .registerSupplier(SoundType.class, "block.chorus_flower.grow", () -> (SoundType) SoundEvents.CHORUS_FLOWER_GROW)
            .registerSupplier(SoundType.class, "block.comparator.click", () -> (SoundType) SoundEvents.COMPARATOR_CLICK)
            .registerSupplier(SoundType.class, "block.composter.empty", () -> (SoundType) SoundEvents.COMPOSTER_EMPTY)
            .registerSupplier(SoundType.class, "block.composter.fill", () -> (SoundType) SoundEvents.COMPOSTER_FILL)
            .registerSupplier(SoundType.class, "block.composter.fill_success", () -> (SoundType) SoundEvents.COMPOSTER_FILL_SUCCESS)
            .registerSupplier(SoundType.class, "block.composter.ready", () -> (SoundType) SoundEvents.COMPOSTER_READY)
            .registerSupplier(SoundType.class, "block.conduit.activate", () -> (SoundType) SoundEvents.CONDUIT_ACTIVATE)
            .registerSupplier(SoundType.class, "block.conduit.ambient", () -> (SoundType) SoundEvents.CONDUIT_AMBIENT)
            .registerSupplier(SoundType.class, "block.conduit.ambient.short", () -> (SoundType) SoundEvents.CONDUIT_AMBIENT_SHORT)
            .registerSupplier(SoundType.class, "block.conduit.attack.target", () -> (SoundType) SoundEvents.CONDUIT_ATTACK_TARGET)
            .registerSupplier(SoundType.class, "block.conduit.deactivate", () -> (SoundType) SoundEvents.CONDUIT_DEACTIVATE)
            .registerSupplier(SoundType.class, "block.coral_block.break", () -> (SoundType) SoundEvents.CORAL_BLOCK_BREAK)
            .registerSupplier(SoundType.class, "block.coral_block.fall", () -> (SoundType) SoundEvents.CORAL_BLOCK_FALL)
            .registerSupplier(SoundType.class, "block.coral_block.hit", () -> (SoundType) SoundEvents.CORAL_BLOCK_HIT)
            .registerSupplier(SoundType.class, "block.coral_block.place", () -> (SoundType) SoundEvents.CORAL_BLOCK_PLACE)
            .registerSupplier(SoundType.class, "block.coral_block.step", () -> (SoundType) SoundEvents.CORAL_BLOCK_STEP)
            .registerSupplier(SoundType.class, "block.crop.break", () -> (SoundType) SoundEvents.CROP_BREAK)
            .registerSupplier(SoundType.class, "block.dispenser.dispense", () -> (SoundType) SoundEvents.DISPENSER_DISPENSE)
            .registerSupplier(SoundType.class, "block.dispenser.fail", () -> (SoundType) SoundEvents.DISPENSER_FAIL)
            .registerSupplier(SoundType.class, "block.dispenser.launch", () -> (SoundType) SoundEvents.DISPENSER_LAUNCH)
            .registerSupplier(SoundType.class, "block.enchantment_table.use", () -> (SoundType) SoundEvents.ENCHANTMENT_TABLE_USE)
            .registerSupplier(SoundType.class, "block.end_gateway.spawn", () -> (SoundType) SoundEvents.END_GATEWAY_SPAWN)
            .registerSupplier(SoundType.class, "block.end_portal.spawn", () -> (SoundType) SoundEvents.END_PORTAL_SPAWN)
            .registerSupplier(SoundType.class, "block.end_portal_frame.fill", () -> (SoundType) SoundEvents.END_PORTAL_FRAME_FILL)
            .registerSupplier(SoundType.class, "block.ender_chest.close", () -> (SoundType) SoundEvents.ENDER_CHEST_CLOSE)
            .registerSupplier(SoundType.class, "block.ender_chest.open", () -> (SoundType) SoundEvents.ENDER_CHEST_OPEN)
            .registerSupplier(SoundType.class, "block.fence_gate.close", () -> (SoundType) SoundEvents.FENCE_GATE_CLOSE)
            .registerSupplier(SoundType.class, "block.fence_gate.open", () -> (SoundType) SoundEvents.FENCE_GATE_OPEN)
            .registerSupplier(SoundType.class, "block.fire.ambient", () -> (SoundType) SoundEvents.FIRE_AMBIENT)
            .registerSupplier(SoundType.class, "block.fire.extinguish", () -> (SoundType) SoundEvents.FIRE_EXTINGUISH)
            .registerSupplier(SoundType.class, "block.fungus.break", () -> (SoundType) SoundEvents.FUNGUS_BREAK)
            .registerSupplier(SoundType.class, "block.fungus.fall", () -> (SoundType) SoundEvents.FUNGUS_FALL)
            .registerSupplier(SoundType.class, "block.fungus.hit", () -> (SoundType) SoundEvents.FUNGUS_HIT)
            .registerSupplier(SoundType.class, "block.fungus.place", () -> (SoundType) SoundEvents.FUNGUS_PLACE)
            .registerSupplier(SoundType.class, "block.fungus.step", () -> (SoundType) SoundEvents.FUNGUS_STEP)
            .registerSupplier(SoundType.class, "block.furnace.fire_crackle", () -> (SoundType) SoundEvents.FURNACE_FIRE_CRACKLE)
            .registerSupplier(SoundType.class, "block.gilded_blackstone.break", () -> (SoundType) SoundEvents.GILDED_BLACKSTONE_BREAK)
            .registerSupplier(SoundType.class, "block.gilded_blackstone.fall", () -> (SoundType) SoundEvents.GILDED_BLACKSTONE_FALL)
            .registerSupplier(SoundType.class, "block.gilded_blackstone.hit", () -> (SoundType) SoundEvents.GILDED_BLACKSTONE_HIT)
            .registerSupplier(SoundType.class, "block.gilded_blackstone.place", () -> (SoundType) SoundEvents.GILDED_BLACKSTONE_PLACE)
            .registerSupplier(SoundType.class, "block.gilded_blackstone.step", () -> (SoundType) SoundEvents.GILDED_BLACKSTONE_STEP)
            .registerSupplier(SoundType.class, "block.glass.break", () -> (SoundType) SoundEvents.GLASS_BREAK)
            .registerSupplier(SoundType.class, "block.glass.fall", () -> (SoundType) SoundEvents.GLASS_FALL)
            .registerSupplier(SoundType.class, "block.glass.hit", () -> (SoundType) SoundEvents.GLASS_HIT)
            .registerSupplier(SoundType.class, "block.glass.place", () -> (SoundType) SoundEvents.GLASS_PLACE)
            .registerSupplier(SoundType.class, "block.glass.step", () -> (SoundType) SoundEvents.GLASS_STEP)
            .registerSupplier(SoundType.class, "block.grass.break", () -> (SoundType) SoundEvents.GRASS_BREAK)
            .registerSupplier(SoundType.class, "block.grass.fall", () -> (SoundType) SoundEvents.GRASS_FALL)
            .registerSupplier(SoundType.class, "block.grass.hit", () -> (SoundType) SoundEvents.GRASS_HIT)
            .registerSupplier(SoundType.class, "block.grass.place", () -> (SoundType) SoundEvents.GRASS_PLACE)
            .registerSupplier(SoundType.class, "block.grass.step", () -> (SoundType) SoundEvents.GRASS_STEP)
            .registerSupplier(SoundType.class, "block.gravel.break", () -> (SoundType) SoundEvents.GRAVEL_BREAK)
            .registerSupplier(SoundType.class, "block.gravel.fall", () -> (SoundType) SoundEvents.GRAVEL_FALL)
            .registerSupplier(SoundType.class, "block.gravel.hit", () -> (SoundType) SoundEvents.GRAVEL_HIT)
            .registerSupplier(SoundType.class, "block.gravel.place", () -> (SoundType) SoundEvents.GRAVEL_PLACE)
            .registerSupplier(SoundType.class, "block.gravel.step", () -> (SoundType) SoundEvents.GRAVEL_STEP)
            .registerSupplier(SoundType.class, "block.grindstone.use", () -> (SoundType) SoundEvents.GRINDSTONE_USE)
            .registerSupplier(SoundType.class, "block.honey_block.break", () -> (SoundType) SoundEvents.HONEY_BLOCK_BREAK)
            .registerSupplier(SoundType.class, "block.honey_block.fall", () -> (SoundType) SoundEvents.HONEY_BLOCK_FALL)
            .registerSupplier(SoundType.class, "block.honey_block.hit", () -> (SoundType) SoundEvents.HONEY_BLOCK_HIT)
            .registerSupplier(SoundType.class, "block.honey_block.place", () -> (SoundType) SoundEvents.HONEY_BLOCK_PLACE)
            .registerSupplier(SoundType.class, "block.honey_block.slide", () -> (SoundType) SoundEvents.HONEY_BLOCK_SLIDE)
            .registerSupplier(SoundType.class, "block.honey_block.step", () -> (SoundType) SoundEvents.HONEY_BLOCK_STEP)
            .registerSupplier(SoundType.class, "block.iron_door.close", () -> (SoundType) SoundEvents.IRON_DOOR_CLOSE)
            .registerSupplier(SoundType.class, "block.iron_door.open", () -> (SoundType) SoundEvents.IRON_DOOR_OPEN)
            .registerSupplier(SoundType.class, "block.iron_trapdoor.close", () -> (SoundType) SoundEvents.IRON_TRAPDOOR_CLOSE)
            .registerSupplier(SoundType.class, "block.iron_trapdoor.open", () -> (SoundType) SoundEvents.IRON_TRAPDOOR_OPEN)
            .registerSupplier(SoundType.class, "block.ladder.break", () -> (SoundType) SoundEvents.LADDER_BREAK)
            .registerSupplier(SoundType.class, "block.ladder.fall", () -> (SoundType) SoundEvents.LADDER_FALL)
            .registerSupplier(SoundType.class, "block.ladder.hit", () -> (SoundType) SoundEvents.LADDER_HIT)
            .registerSupplier(SoundType.class, "block.ladder.place", () -> (SoundType) SoundEvents.LADDER_PLACE)
            .registerSupplier(SoundType.class, "block.ladder.step", () -> (SoundType) SoundEvents.LADDER_STEP)
            .registerSupplier(SoundType.class, "block.lantern.break", () -> (SoundType) SoundEvents.LANTERN_BREAK)
            .registerSupplier(SoundType.class, "block.lantern.fall", () -> (SoundType) SoundEvents.LANTERN_FALL)
            .registerSupplier(SoundType.class, "block.lantern.hit", () -> (SoundType) SoundEvents.LANTERN_HIT)
            .registerSupplier(SoundType.class, "block.lantern.place", () -> (SoundType) SoundEvents.LANTERN_PLACE)
            .registerSupplier(SoundType.class, "block.lantern.step", () -> (SoundType) SoundEvents.LANTERN_STEP)
            .registerSupplier(SoundType.class, "block.lava.ambient", () -> (SoundType) SoundEvents.LAVA_AMBIENT)
            .registerSupplier(SoundType.class, "block.lava.extinguish", () -> (SoundType) SoundEvents.LAVA_EXTINGUISH)
            .registerSupplier(SoundType.class, "block.lava.pop", () -> (SoundType) SoundEvents.LAVA_POP)
            .registerSupplier(SoundType.class, "block.lever.click", () -> (SoundType) SoundEvents.LEVER_CLICK)
            .registerSupplier(SoundType.class, "block.lily_pad.place", () -> (SoundType) SoundEvents.LILY_PAD_PLACE)
            .registerSupplier(SoundType.class, "block.lodestone.break", () -> (SoundType) SoundEvents.LODESTONE_BREAK)
            .registerSupplier(SoundType.class, "block.lodestone.fall", () -> (SoundType) SoundEvents.LODESTONE_FALL)
            .registerSupplier(SoundType.class, "block.lodestone.hit", () -> (SoundType) SoundEvents.LODESTONE_HIT)
            .registerSupplier(SoundType.class, "block.lodestone.place", () -> (SoundType) SoundEvents.LODESTONE_PLACE)
            .registerSupplier(SoundType.class, "block.lodestone.step", () -> (SoundType) SoundEvents.LODESTONE_STEP)
            .registerSupplier(SoundType.class, "block.metal.break", () -> (SoundType) SoundEvents.METAL_BREAK)
            .registerSupplier(SoundType.class, "block.metal.fall", () -> (SoundType) SoundEvents.METAL_FALL)
            .registerSupplier(SoundType.class, "block.metal.hit", () -> (SoundType) SoundEvents.METAL_HIT)
            .registerSupplier(SoundType.class, "block.metal.place", () -> (SoundType) SoundEvents.METAL_PLACE)
            .registerSupplier(SoundType.class, "block.metal.step", () -> (SoundType) SoundEvents.METAL_STEP)
            .registerSupplier(SoundType.class, "block.metal_pressure_plate.click_off", () -> (SoundType) SoundEvents.METAL_PRESSURE_PLATE_CLICK_OFF)
            .registerSupplier(SoundType.class, "block.metal_pressure_plate.click_on", () -> (SoundType) SoundEvents.METAL_PRESSURE_PLATE_CLICK_ON)
            .registerSupplier(SoundType.class, "block.nether_bricks.break", () -> (SoundType) SoundEvents.NETHER_BRICKS_BREAK)
            .registerSupplier(SoundType.class, "block.nether_bricks.fall", () -> (SoundType) SoundEvents.NETHER_BRICKS_FALL)
            .registerSupplier(SoundType.class, "block.nether_bricks.hit", () -> (SoundType) SoundEvents.NETHER_BRICKS_HIT)
            .registerSupplier(SoundType.class, "block.nether_bricks.place", () -> (SoundType) SoundEvents.NETHER_BRICKS_PLACE)
            .registerSupplier(SoundType.class, "block.nether_bricks.step", () -> (SoundType) SoundEvents.NETHER_BRICKS_STEP)
            .registerSupplier(SoundType.class, "block.nether_gold_ore.break", () -> (SoundType) SoundEvents.NETHER_GOLD_ORE_BREAK)
            .registerSupplier(SoundType.class, "block.nether_gold_ore.fall", () -> (SoundType) SoundEvents.NETHER_GOLD_ORE_FALL)
            .registerSupplier(SoundType.class, "block.nether_gold_ore.hit", () -> (SoundType) SoundEvents.NETHER_GOLD_ORE_HIT)
            .registerSupplier(SoundType.class, "block.nether_gold_ore.place", () -> (SoundType) SoundEvents.NETHER_GOLD_ORE_PLACE)
            .registerSupplier(SoundType.class, "block.nether_gold_ore.step", () -> (SoundType) SoundEvents.NETHER_GOLD_ORE_STEP)
            .registerSupplier(SoundType.class, "block.nether_ore.break", () -> (SoundType) SoundEvents.NETHER_ORE_BREAK)
            .registerSupplier(SoundType.class, "block.nether_ore.fall", () -> (SoundType) SoundEvents.NETHER_ORE_FALL)
            .registerSupplier(SoundType.class, "block.nether_ore.hit", () -> (SoundType) SoundEvents.NETHER_ORE_HIT)
            .registerSupplier(SoundType.class, "block.nether_ore.place", () -> (SoundType) SoundEvents.NETHER_ORE_PLACE)
            .registerSupplier(SoundType.class, "block.nether_ore.step", () -> (SoundType) SoundEvents.NETHER_ORE_STEP)
            .registerSupplier(SoundType.class, "block.nether_sprouts.break", () -> (SoundType) SoundEvents.NETHER_SPROUTS_BREAK)
            .registerSupplier(SoundType.class, "block.nether_sprouts.fall", () -> (SoundType) SoundEvents.NETHER_SPROUTS_FALL)
            .registerSupplier(SoundType.class, "block.nether_sprouts.hit", () -> (SoundType) SoundEvents.NETHER_SPROUTS_HIT)
            .registerSupplier(SoundType.class, "block.nether_sprouts.place", () -> (SoundType) SoundEvents.NETHER_SPROUTS_PLACE)
            .registerSupplier(SoundType.class, "block.nether_sprouts.step", () -> (SoundType) SoundEvents.NETHER_SPROUTS_STEP)
            .registerSupplier(SoundType.class, "block.nether_wart.break", () -> (SoundType) SoundEvents.NETHER_WART_BREAK)
            .registerSupplier(SoundType.class, "block.netherite_block.break", () -> (SoundType) SoundEvents.NETHERITE_BLOCK_BREAK)
            .registerSupplier(SoundType.class, "block.netherite_block.fall", () -> (SoundType) SoundEvents.NETHERITE_BLOCK_FALL)
            .registerSupplier(SoundType.class, "block.netherite_block.hit", () -> (SoundType) SoundEvents.NETHERITE_BLOCK_HIT)
            .registerSupplier(SoundType.class, "block.netherite_block.place", () -> (SoundType) SoundEvents.NETHERITE_BLOCK_PLACE)
            .registerSupplier(SoundType.class, "block.netherite_block.step", () -> (SoundType) SoundEvents.NETHERITE_BLOCK_STEP)
            .registerSupplier(SoundType.class, "block.netherrack.break", () -> (SoundType) SoundEvents.NETHERRACK_BREAK)
            .registerSupplier(SoundType.class, "block.netherrack.fall", () -> (SoundType) SoundEvents.NETHERRACK_FALL)
            .registerSupplier(SoundType.class, "block.netherrack.hit", () -> (SoundType) SoundEvents.NETHERRACK_HIT)
            .registerSupplier(SoundType.class, "block.netherrack.place", () -> (SoundType) SoundEvents.NETHERRACK_PLACE)
            .registerSupplier(SoundType.class, "block.netherrack.step", () -> (SoundType) SoundEvents.NETHERRACK_STEP)
            .registerSupplier(SoundType.class, "block.note_block.banjo", () -> (SoundType) SoundEvents.NOTE_BLOCK_BANJO)
            .registerSupplier(SoundType.class, "block.note_block.basedrum", () -> (SoundType) SoundEvents.NOTE_BLOCK_BASEDRUM)
            .registerSupplier(SoundType.class, "block.note_block.bass", () -> (SoundType) SoundEvents.NOTE_BLOCK_BASS)
            .registerSupplier(SoundType.class, "block.note_block.bell", () -> (SoundType) SoundEvents.NOTE_BLOCK_BELL)
            .registerSupplier(SoundType.class, "block.note_block.bit", () -> (SoundType) SoundEvents.NOTE_BLOCK_BIT)
            .registerSupplier(SoundType.class, "block.note_block.chime", () -> (SoundType) SoundEvents.NOTE_BLOCK_CHIME)
            .registerSupplier(SoundType.class, "block.note_block.cow_bell", () -> (SoundType) SoundEvents.NOTE_BLOCK_COW_BELL)
            .registerSupplier(SoundType.class, "block.note_block.didgeridoo", () -> (SoundType) SoundEvents.NOTE_BLOCK_DIDGERIDOO)
            .registerSupplier(SoundType.class, "block.note_block.flute", () -> (SoundType) SoundEvents.NOTE_BLOCK_FLUTE)
            .registerSupplier(SoundType.class, "block.note_block.guitar", () -> (SoundType) SoundEvents.NOTE_BLOCK_GUITAR)
            .registerSupplier(SoundType.class, "block.note_block.harp", () -> (SoundType) SoundEvents.NOTE_BLOCK_HARP)
            .registerSupplier(SoundType.class, "block.note_block.hat", () -> (SoundType) SoundEvents.NOTE_BLOCK_HAT)
            .registerSupplier(SoundType.class, "block.note_block.iron_xylophone", () -> (SoundType) SoundEvents.NOTE_BLOCK_IRON_XYLOPHONE)
            .registerSupplier(SoundType.class, "block.note_block.pling", () -> (SoundType) SoundEvents.NOTE_BLOCK_PLING)
            .registerSupplier(SoundType.class, "block.note_block.snare", () -> (SoundType) SoundEvents.NOTE_BLOCK_SNARE)
            .registerSupplier(SoundType.class, "block.note_block.xylophone", () -> (SoundType) SoundEvents.NOTE_BLOCK_XYLOPHONE)
            .registerSupplier(SoundType.class, "block.nylium.break", () -> (SoundType) SoundEvents.NYLIUM_BREAK)
            .registerSupplier(SoundType.class, "block.nylium.fall", () -> (SoundType) SoundEvents.NYLIUM_FALL)
            .registerSupplier(SoundType.class, "block.nylium.hit", () -> (SoundType) SoundEvents.NYLIUM_HIT)
            .registerSupplier(SoundType.class, "block.nylium.place", () -> (SoundType) SoundEvents.NYLIUM_PLACE)
            .registerSupplier(SoundType.class, "block.nylium.step", () -> (SoundType) SoundEvents.NYLIUM_STEP)
            .registerSupplier(SoundType.class, "block.piston.contract", () -> (SoundType) SoundEvents.PISTON_CONTRACT)
            .registerSupplier(SoundType.class, "block.piston.extend", () -> (SoundType) SoundEvents.PISTON_EXTEND)
            .registerSupplier(SoundType.class, "block.portal.ambient", () -> (SoundType) SoundEvents.PORTAL_AMBIENT)
            .registerSupplier(SoundType.class, "block.portal.travel", () -> (SoundType) SoundEvents.PORTAL_TRAVEL)
            .registerSupplier(SoundType.class, "block.portal.trigger", () -> (SoundType) SoundEvents.PORTAL_TRIGGER)
            .registerSupplier(SoundType.class, "block.pumpkin.carve", () -> (SoundType) SoundEvents.PUMPKIN_CARVE)
            .registerSupplier(SoundType.class, "block.redstone_torch.burnout", () -> (SoundType) SoundEvents.REDSTONE_TORCH_BURNOUT)
            .registerSupplier(SoundType.class, "block.respawn_anchor.ambient", () -> (SoundType) SoundEvents.RESPAWN_ANCHOR_AMBIENT)
            .registerSupplier(SoundType.class, "block.respawn_anchor.charge", () -> (SoundType) SoundEvents.RESPAWN_ANCHOR_CHARGE)
            .registerSupplier(SoundType.class, "block.respawn_anchor.deplete", () -> (SoundType) SoundEvents.RESPAWN_ANCHOR_DEPLETE)
            .registerSupplier(SoundType.class, "block.respawn_anchor.set_spawn", () -> (SoundType) SoundEvents.RESPAWN_ANCHOR_SET_SPAWN)
            .registerSupplier(SoundType.class, "block.roots.break", () -> (SoundType) SoundEvents.ROOTS_BREAK)
            .registerSupplier(SoundType.class, "block.roots.fall", () -> (SoundType) SoundEvents.ROOTS_FALL)
            .registerSupplier(SoundType.class, "block.roots.hit", () -> (SoundType) SoundEvents.ROOTS_HIT)
            .registerSupplier(SoundType.class, "block.roots.place", () -> (SoundType) SoundEvents.ROOTS_PLACE)
            .registerSupplier(SoundType.class, "block.roots.step", () -> (SoundType) SoundEvents.ROOTS_STEP)
            .registerSupplier(SoundType.class, "block.sand.break", () -> (SoundType) SoundEvents.SAND_BREAK)
            .registerSupplier(SoundType.class, "block.sand.fall", () -> (SoundType) SoundEvents.SAND_FALL)
            .registerSupplier(SoundType.class, "block.sand.hit", () -> (SoundType) SoundEvents.SAND_HIT)
            .registerSupplier(SoundType.class, "block.sand.place", () -> (SoundType) SoundEvents.SAND_PLACE)
            .registerSupplier(SoundType.class, "block.sand.step", () -> (SoundType) SoundEvents.SAND_STEP)
            .registerSupplier(SoundType.class, "block.scaffolding.break", () -> (SoundType) SoundEvents.SCAFFOLDING_BREAK)
            .registerSupplier(SoundType.class, "block.scaffolding.fall", () -> (SoundType) SoundEvents.SCAFFOLDING_FALL)
            .registerSupplier(SoundType.class, "block.scaffolding.hit", () -> (SoundType) SoundEvents.SCAFFOLDING_HIT)
            .registerSupplier(SoundType.class, "block.scaffolding.place", () -> (SoundType) SoundEvents.SCAFFOLDING_PLACE)
            .registerSupplier(SoundType.class, "block.scaffolding.step", () -> (SoundType) SoundEvents.SCAFFOLDING_STEP)
            .registerSupplier(SoundType.class, "block.shroomlight.break", () -> (SoundType) SoundEvents.SHROOMLIGHT_BREAK)
            .registerSupplier(SoundType.class, "block.shroomlight.fall", () -> (SoundType) SoundEvents.SHROOMLIGHT_FALL)
            .registerSupplier(SoundType.class, "block.shroomlight.hit", () -> (SoundType) SoundEvents.SHROOMLIGHT_HIT)
            .registerSupplier(SoundType.class, "block.shroomlight.place", () -> (SoundType) SoundEvents.SHROOMLIGHT_PLACE)
            .registerSupplier(SoundType.class, "block.shroomlight.step", () -> (SoundType) SoundEvents.SHROOMLIGHT_STEP)
            .registerSupplier(SoundType.class, "block.shulker_box.close", () -> (SoundType) SoundEvents.SHULKER_BOX_CLOSE)
            .registerSupplier(SoundType.class, "block.shulker_box.open", () -> (SoundType) SoundEvents.SHULKER_BOX_OPEN)
            .registerSupplier(SoundType.class, "block.slime_block.break", () -> (SoundType) SoundEvents.SLIME_BLOCK_BREAK)
            .registerSupplier(SoundType.class, "block.slime_block.fall", () -> (SoundType) SoundEvents.SLIME_BLOCK_FALL)
            .registerSupplier(SoundType.class, "block.slime_block.hit", () -> (SoundType) SoundEvents.SLIME_BLOCK_HIT)
            .registerSupplier(SoundType.class, "block.slime_block.place", () -> (SoundType) SoundEvents.SLIME_BLOCK_PLACE)
            .registerSupplier(SoundType.class, "block.slime_block.step", () -> (SoundType) SoundEvents.SLIME_BLOCK_STEP)
            .registerSupplier(SoundType.class, "block.smithing_table.use", () -> (SoundType) SoundEvents.SMITHING_TABLE_USE)
            .registerSupplier(SoundType.class, "block.smoker.smoke", () -> (SoundType) SoundEvents.SMOKER_SMOKE)
            .registerSupplier(SoundType.class, "block.snow.break", () -> (SoundType) SoundEvents.SNOW_BREAK)
            .registerSupplier(SoundType.class, "block.snow.fall", () -> (SoundType) SoundEvents.SNOW_FALL)
            .registerSupplier(SoundType.class, "block.snow.hit", () -> (SoundType) SoundEvents.SNOW_HIT)
            .registerSupplier(SoundType.class, "block.snow.place", () -> (SoundType) SoundEvents.SNOW_PLACE)
            .registerSupplier(SoundType.class, "block.snow.step", () -> (SoundType) SoundEvents.SNOW_STEP)
            .registerSupplier(SoundType.class, "block.soul_sand.break", () -> (SoundType) SoundEvents.SOUL_SAND_BREAK)
            .registerSupplier(SoundType.class, "block.soul_sand.fall", () -> (SoundType) SoundEvents.SOUL_SAND_FALL)
            .registerSupplier(SoundType.class, "block.soul_sand.hit", () -> (SoundType) SoundEvents.SOUL_SAND_HIT)
            .registerSupplier(SoundType.class, "block.soul_sand.place", () -> (SoundType) SoundEvents.SOUL_SAND_PLACE)
            .registerSupplier(SoundType.class, "block.soul_sand.step", () -> (SoundType) SoundEvents.SOUL_SAND_STEP)
            .registerSupplier(SoundType.class, "block.soul_soil.break", () -> (SoundType) SoundEvents.SOUL_SOIL_BREAK)
            .registerSupplier(SoundType.class, "block.soul_soil.fall", () -> (SoundType) SoundEvents.SOUL_SOIL_FALL)
            .registerSupplier(SoundType.class, "block.soul_soil.hit", () -> (SoundType) SoundEvents.SOUL_SOIL_HIT)
            .registerSupplier(SoundType.class, "block.soul_soil.place", () -> (SoundType) SoundEvents.SOUL_SOIL_PLACE)
            .registerSupplier(SoundType.class, "block.soul_soil.step", () -> (SoundType) SoundEvents.SOUL_SOIL_STEP)
            .registerSupplier(SoundType.class, "block.stem.break", () -> (SoundType) SoundEvents.STEM_BREAK)
            .registerSupplier(SoundType.class, "block.stem.fall", () -> (SoundType) SoundEvents.STEM_FALL)
            .registerSupplier(SoundType.class, "block.stem.hit", () -> (SoundType) SoundEvents.STEM_HIT)
            .registerSupplier(SoundType.class, "block.stem.place", () -> (SoundType) SoundEvents.STEM_PLACE)
            .registerSupplier(SoundType.class, "block.stem.step", () -> (SoundType) SoundEvents.STEM_STEP)
            .registerSupplier(SoundType.class, "block.stone.break", () -> (SoundType) SoundEvents.STONE_BREAK)
            .registerSupplier(SoundType.class, "block.stone.fall", () -> (SoundType) SoundEvents.STONE_FALL)
            .registerSupplier(SoundType.class, "block.stone.hit", () -> (SoundType) SoundEvents.STONE_HIT)
            .registerSupplier(SoundType.class, "block.stone.place", () -> (SoundType) SoundEvents.STONE_PLACE)
            .registerSupplier(SoundType.class, "block.stone.step", () -> (SoundType) SoundEvents.STONE_STEP)
            .registerSupplier(SoundType.class, "block.stone_button.click_off", () -> (SoundType) SoundEvents.STONE_BUTTON_CLICK_OFF)
            .registerSupplier(SoundType.class, "block.stone_button.click_on", () -> (SoundType) SoundEvents.STONE_BUTTON_CLICK_ON)
            .registerSupplier(SoundType.class, "block.stone_pressure_plate.click_off", () -> (SoundType) SoundEvents.STONE_PRESSURE_PLATE_CLICK_OFF)
            .registerSupplier(SoundType.class, "block.stone_pressure_plate.click_on", () -> (SoundType) SoundEvents.STONE_PRESSURE_PLATE_CLICK_ON)
            .registerSupplier(SoundType.class, "block.sweet_berry_bush.break", () -> (SoundType) SoundEvents.SWEET_BERRY_BUSH_BREAK)
            .registerSupplier(SoundType.class, "block.sweet_berry_bush.place", () -> (SoundType) SoundEvents.SWEET_BERRY_BUSH_PLACE)
            .registerSupplier(SoundType.class, "block.tripwire.attach", () -> (SoundType) SoundEvents.TRIPWIRE_ATTACH)
            .registerSupplier(SoundType.class, "block.tripwire.click_off", () -> (SoundType) SoundEvents.TRIPWIRE_CLICK_OFF)
            .registerSupplier(SoundType.class, "block.tripwire.click_on", () -> (SoundType) SoundEvents.TRIPWIRE_CLICK_ON)
            .registerSupplier(SoundType.class, "block.tripwire.detach", () -> (SoundType) SoundEvents.TRIPWIRE_DETACH)
            .registerSupplier(SoundType.class, "block.vine.step", () -> (SoundType) SoundEvents.VINE_STEP)
            .registerSupplier(SoundType.class, "block.wart_block.break", () -> (SoundType) SoundEvents.WART_BLOCK_BREAK)
            .registerSupplier(SoundType.class, "block.wart_block.fall", () -> (SoundType) SoundEvents.WART_BLOCK_FALL)
            .registerSupplier(SoundType.class, "block.wart_block.hit", () -> (SoundType) SoundEvents.WART_BLOCK_HIT)
            .registerSupplier(SoundType.class, "block.wart_block.place", () -> (SoundType) SoundEvents.WART_BLOCK_PLACE)
            .registerSupplier(SoundType.class, "block.wart_block.step", () -> (SoundType) SoundEvents.WART_BLOCK_STEP)
            .registerSupplier(SoundType.class, "block.water.ambient", () -> (SoundType) SoundEvents.WATER_AMBIENT)
            .registerSupplier(SoundType.class, "block.weeping_vines.break", () -> (SoundType) SoundEvents.WEEPING_VINES_BREAK)
            .registerSupplier(SoundType.class, "block.weeping_vines.fall", () -> (SoundType) SoundEvents.WEEPING_VINES_FALL)
            .registerSupplier(SoundType.class, "block.weeping_vines.hit", () -> (SoundType) SoundEvents.WEEPING_VINES_HIT)
            .registerSupplier(SoundType.class, "block.weeping_vines.place", () -> (SoundType) SoundEvents.WEEPING_VINES_PLACE)
            .registerSupplier(SoundType.class, "block.weeping_vines.step", () -> (SoundType) SoundEvents.WEEPING_VINES_STEP)
            .registerSupplier(SoundType.class, "block.wet_grass.break", () -> (SoundType) SoundEvents.WET_GRASS_BREAK)
            .registerSupplier(SoundType.class, "block.wet_grass.fall", () -> (SoundType) SoundEvents.WET_GRASS_FALL)
            .registerSupplier(SoundType.class, "block.wet_grass.hit", () -> (SoundType) SoundEvents.WET_GRASS_HIT)
            .registerSupplier(SoundType.class, "block.wet_grass.place", () -> (SoundType) SoundEvents.WET_GRASS_PLACE)
            .registerSupplier(SoundType.class, "block.wet_grass.step", () -> (SoundType) SoundEvents.WET_GRASS_STEP)
            .registerSupplier(SoundType.class, "block.wood.break", () -> (SoundType) SoundEvents.WOOD_BREAK)
            .registerSupplier(SoundType.class, "block.wood.fall", () -> (SoundType) SoundEvents.WOOD_FALL)
            .registerSupplier(SoundType.class, "block.wood.hit", () -> (SoundType) SoundEvents.WOOD_HIT)
            .registerSupplier(SoundType.class, "block.wood.place", () -> (SoundType) SoundEvents.WOOD_PLACE)
            .registerSupplier(SoundType.class, "block.wood.step", () -> (SoundType) SoundEvents.WOOD_STEP)
            .registerSupplier(SoundType.class, "block.wooden_button.click_off", () -> (SoundType) SoundEvents.WOODEN_BUTTON_CLICK_OFF)
            .registerSupplier(SoundType.class, "block.wooden_button.click_on", () -> (SoundType) SoundEvents.WOODEN_BUTTON_CLICK_ON)
            .registerSupplier(SoundType.class, "block.wooden_door.close", () -> (SoundType) SoundEvents.WOODEN_DOOR_CLOSE)
            .registerSupplier(SoundType.class, "block.wooden_door.open", () -> (SoundType) SoundEvents.WOODEN_DOOR_OPEN)
            .registerSupplier(SoundType.class, "block.wooden_pressure_plate.click_off", () -> (SoundType) SoundEvents.WOODEN_PRESSURE_PLATE_CLICK_OFF)
            .registerSupplier(SoundType.class, "block.wooden_pressure_plate.click_on", () -> (SoundType) SoundEvents.WOODEN_PRESSURE_PLATE_CLICK_ON)
            .registerSupplier(SoundType.class, "block.wooden_trapdoor.close", () -> (SoundType) SoundEvents.WOODEN_TRAPDOOR_CLOSE)
            .registerSupplier(SoundType.class, "block.wooden_trapdoor.open", () -> (SoundType) SoundEvents.WOODEN_TRAPDOOR_OPEN)
            .registerSupplier(SoundType.class, "block.wool.break", () -> (SoundType) SoundEvents.WOOL_BREAK)
            .registerSupplier(SoundType.class, "block.wool.fall", () -> (SoundType) SoundEvents.WOOL_FALL)
            .registerSupplier(SoundType.class, "block.wool.hit", () -> (SoundType) SoundEvents.WOOL_HIT)
            .registerSupplier(SoundType.class, "block.wool.place", () -> (SoundType) SoundEvents.WOOL_PLACE)
            .registerSupplier(SoundType.class, "block.wool.step", () -> (SoundType) SoundEvents.WOOL_STEP)
            .registerSupplier(SoundType.class, "enchant.thorns.hit", () -> (SoundType) SoundEvents.THORNS_HIT)
            .registerSupplier(SoundType.class, "entity.armor_stand.break", () -> (SoundType) SoundEvents.ARMOR_STAND_BREAK)
            .registerSupplier(SoundType.class, "entity.armor_stand.fall", () -> (SoundType) SoundEvents.ARMOR_STAND_FALL)
            .registerSupplier(SoundType.class, "entity.armor_stand.hit", () -> (SoundType) SoundEvents.ARMOR_STAND_HIT)
            .registerSupplier(SoundType.class, "entity.armor_stand.place", () -> (SoundType) SoundEvents.ARMOR_STAND_PLACE)
            .registerSupplier(SoundType.class, "entity.arrow.hit", () -> (SoundType) SoundEvents.ARROW_HIT)
            .registerSupplier(SoundType.class, "entity.arrow.hit_player", () -> (SoundType) SoundEvents.ARROW_HIT_PLAYER)
            .registerSupplier(SoundType.class, "entity.arrow.shoot", () -> (SoundType) SoundEvents.ARROW_SHOOT)
            .registerSupplier(SoundType.class, "entity.bat.ambient", () -> (SoundType) SoundEvents.BAT_AMBIENT)
            .registerSupplier(SoundType.class, "entity.bat.death", () -> (SoundType) SoundEvents.BAT_DEATH)
            .registerSupplier(SoundType.class, "entity.bat.hurt", () -> (SoundType) SoundEvents.BAT_HURT)
            .registerSupplier(SoundType.class, "entity.bat.loop", () -> (SoundType) SoundEvents.BAT_LOOP)
            .registerSupplier(SoundType.class, "entity.bat.takeoff", () -> (SoundType) SoundEvents.BAT_TAKEOFF)
            .registerSupplier(SoundType.class, "entity.bee.death", () -> (SoundType) SoundEvents.BEE_DEATH)
            .registerSupplier(SoundType.class, "entity.bee.hurt", () -> (SoundType) SoundEvents.BEE_HURT)
            .registerSupplier(SoundType.class, "entity.bee.loop", () -> (SoundType) SoundEvents.BEE_LOOP)
            .registerSupplier(SoundType.class, "entity.bee.loop_aggressive", () -> (SoundType) SoundEvents.BEE_LOOP_AGGRESSIVE)
            .registerSupplier(SoundType.class, "entity.bee.pollinate", () -> (SoundType) SoundEvents.BEE_POLLINATE)
            .registerSupplier(SoundType.class, "entity.bee.sting", () -> (SoundType) SoundEvents.BEE_STING)
            .registerSupplier(SoundType.class, "entity.blaze.ambient", () -> (SoundType) SoundEvents.BLAZE_AMBIENT)
            .registerSupplier(SoundType.class, "entity.blaze.burn", () -> (SoundType) SoundEvents.BLAZE_BURN)
            .registerSupplier(SoundType.class, "entity.blaze.death", () -> (SoundType) SoundEvents.BLAZE_DEATH)
            .registerSupplier(SoundType.class, "entity.blaze.hurt", () -> (SoundType) SoundEvents.BLAZE_HURT)
            .registerSupplier(SoundType.class, "entity.blaze.shoot", () -> (SoundType) SoundEvents.BLAZE_SHOOT)
            .registerSupplier(SoundType.class, "entity.boat.paddle_land", () -> (SoundType) SoundEvents.BOAT_PADDLE_LAND)
            .registerSupplier(SoundType.class, "entity.boat.paddle_water", () -> (SoundType) SoundEvents.BOAT_PADDLE_WATER)
            .registerSupplier(SoundType.class, "entity.cat.ambient", () -> (SoundType) SoundEvents.CAT_AMBIENT)
            .registerSupplier(SoundType.class, "entity.cat.beg_for_food", () -> (SoundType) SoundEvents.CAT_BEG_FOR_FOOD)
            .registerSupplier(SoundType.class, "entity.cat.death", () -> (SoundType) SoundEvents.CAT_DEATH)
            .registerSupplier(SoundType.class, "entity.cat.eat", () -> (SoundType) SoundEvents.CAT_EAT)
            .registerSupplier(SoundType.class, "entity.cat.hiss", () -> (SoundType) SoundEvents.CAT_HISS)
            .registerSupplier(SoundType.class, "entity.cat.hurt", () -> (SoundType) SoundEvents.CAT_HURT)
            .registerSupplier(SoundType.class, "entity.cat.purr", () -> (SoundType) SoundEvents.CAT_PURR)
            .registerSupplier(SoundType.class, "entity.cat.purreow", () -> (SoundType) SoundEvents.CAT_PURREOW)
            .registerSupplier(SoundType.class, "entity.cat.stray_ambient", () -> (SoundType) SoundEvents.CAT_STRAY_AMBIENT)
            .registerSupplier(SoundType.class, "entity.chicken.ambient", () -> (SoundType) SoundEvents.CHICKEN_AMBIENT)
            .registerSupplier(SoundType.class, "entity.chicken.death", () -> (SoundType) SoundEvents.CHICKEN_DEATH)
            .registerSupplier(SoundType.class, "entity.chicken.egg", () -> (SoundType) SoundEvents.CHICKEN_EGG)
            .registerSupplier(SoundType.class, "entity.chicken.hurt", () -> (SoundType) SoundEvents.CHICKEN_HURT)
            .registerSupplier(SoundType.class, "entity.chicken.step", () -> (SoundType) SoundEvents.CHICKEN_STEP)
            .registerSupplier(SoundType.class, "entity.cod.ambient", () -> (SoundType) SoundEvents.COD_AMBIENT)
            .registerSupplier(SoundType.class, "entity.cod.death", () -> (SoundType) SoundEvents.COD_DEATH)
            .registerSupplier(SoundType.class, "entity.cod.flop", () -> (SoundType) SoundEvents.COD_FLOP)
            .registerSupplier(SoundType.class, "entity.cod.hurt", () -> (SoundType) SoundEvents.COD_HURT)
            .registerSupplier(SoundType.class, "entity.cow.ambient", () -> (SoundType) SoundEvents.COW_AMBIENT)
            .registerSupplier(SoundType.class, "entity.cow.death", () -> (SoundType) SoundEvents.COW_DEATH)
            .registerSupplier(SoundType.class, "entity.cow.hurt", () -> (SoundType) SoundEvents.COW_HURT)
            .registerSupplier(SoundType.class, "entity.cow.milk", () -> (SoundType) SoundEvents.COW_MILK)
            .registerSupplier(SoundType.class, "entity.cow.step", () -> (SoundType) SoundEvents.COW_STEP)
            .registerSupplier(SoundType.class, "entity.creeper.death", () -> (SoundType) SoundEvents.CREEPER_DEATH)
            .registerSupplier(SoundType.class, "entity.creeper.hurt", () -> (SoundType) SoundEvents.CREEPER_HURT)
            .registerSupplier(SoundType.class, "entity.creeper.primed", () -> (SoundType) SoundEvents.CREEPER_PRIMED)
            .registerSupplier(SoundType.class, "entity.dolphin.ambient", () -> (SoundType) SoundEvents.DOLPHIN_AMBIENT)
            .registerSupplier(SoundType.class, "entity.dolphin.ambient_water", () -> (SoundType) SoundEvents.DOLPHIN_AMBIENT_WATER)
            .registerSupplier(SoundType.class, "entity.dolphin.attack", () -> (SoundType) SoundEvents.DOLPHIN_ATTACK)
            .registerSupplier(SoundType.class, "entity.dolphin.death", () -> (SoundType) SoundEvents.DOLPHIN_DEATH)
            .registerSupplier(SoundType.class, "entity.dolphin.eat", () -> (SoundType) SoundEvents.DOLPHIN_EAT)
            .registerSupplier(SoundType.class, "entity.dolphin.hurt", () -> (SoundType) SoundEvents.DOLPHIN_HURT)
            .registerSupplier(SoundType.class, "entity.dolphin.jump", () -> (SoundType) SoundEvents.DOLPHIN_JUMP)
            .registerSupplier(SoundType.class, "entity.dolphin.play", () -> (SoundType) SoundEvents.DOLPHIN_PLAY)
            .registerSupplier(SoundType.class, "entity.dolphin.splash", () -> (SoundType) SoundEvents.DOLPHIN_SPLASH)
            .registerSupplier(SoundType.class, "entity.dolphin.swim", () -> (SoundType) SoundEvents.DOLPHIN_SWIM)
            .registerSupplier(SoundType.class, "entity.donkey.ambient", () -> (SoundType) SoundEvents.DONKEY_AMBIENT)
            .registerSupplier(SoundType.class, "entity.donkey.angry", () -> (SoundType) SoundEvents.DONKEY_ANGRY)
            .registerSupplier(SoundType.class, "entity.donkey.chest", () -> (SoundType) SoundEvents.DONKEY_CHEST)
            .registerSupplier(SoundType.class, "entity.donkey.death", () -> (SoundType) SoundEvents.DONKEY_DEATH)
            .registerSupplier(SoundType.class, "entity.donkey.eat", () -> (SoundType) SoundEvents.DONKEY_EAT)
            .registerSupplier(SoundType.class, "entity.donkey.hurt", () -> (SoundType) SoundEvents.DONKEY_HURT)
            .registerSupplier(SoundType.class, "entity.dragon_fireball.explode", () -> (SoundType) SoundEvents.DRAGON_FIREBALL_EXPLODE)
            .registerSupplier(SoundType.class, "entity.drowned.ambient", () -> (SoundType) SoundEvents.DROWNED_AMBIENT)
            .registerSupplier(SoundType.class, "entity.drowned.ambient_water", () -> (SoundType) SoundEvents.DROWNED_AMBIENT_WATER)
            .registerSupplier(SoundType.class, "entity.drowned.death", () -> (SoundType) SoundEvents.DROWNED_DEATH)
            .registerSupplier(SoundType.class, "entity.drowned.death_water", () -> (SoundType) SoundEvents.DROWNED_DEATH_WATER)
            .registerSupplier(SoundType.class, "entity.drowned.hurt", () -> (SoundType) SoundEvents.DROWNED_HURT)
            .registerSupplier(SoundType.class, "entity.drowned.hurt_water", () -> (SoundType) SoundEvents.DROWNED_HURT_WATER)
            .registerSupplier(SoundType.class, "entity.drowned.shoot", () -> (SoundType) SoundEvents.DROWNED_SHOOT)
            .registerSupplier(SoundType.class, "entity.drowned.step", () -> (SoundType) SoundEvents.DROWNED_STEP)
            .registerSupplier(SoundType.class, "entity.drowned.swim", () -> (SoundType) SoundEvents.DROWNED_SWIM)
            .registerSupplier(SoundType.class, "entity.egg.throw", () -> (SoundType) SoundEvents.EGG_THROW)
            .registerSupplier(SoundType.class, "entity.elder_guardian.ambient", () -> (SoundType) SoundEvents.ELDER_GUARDIAN_AMBIENT)
            .registerSupplier(SoundType.class, "entity.elder_guardian.ambient_land", () -> (SoundType) SoundEvents.ELDER_GUARDIAN_AMBIENT_LAND)
            .registerSupplier(SoundType.class, "entity.elder_guardian.curse", () -> (SoundType) SoundEvents.ELDER_GUARDIAN_CURSE)
            .registerSupplier(SoundType.class, "entity.elder_guardian.death", () -> (SoundType) SoundEvents.ELDER_GUARDIAN_DEATH)
            .registerSupplier(SoundType.class, "entity.elder_guardian.death_land", () -> (SoundType) SoundEvents.ELDER_GUARDIAN_DEATH_LAND)
            .registerSupplier(SoundType.class, "entity.elder_guardian.flop", () -> (SoundType) SoundEvents.ELDER_GUARDIAN_FLOP)
            .registerSupplier(SoundType.class, "entity.elder_guardian.hurt", () -> (SoundType) SoundEvents.ELDER_GUARDIAN_HURT)
            .registerSupplier(SoundType.class, "entity.elder_guardian.hurt_land", () -> (SoundType) SoundEvents.ELDER_GUARDIAN_HURT_LAND)
            .registerSupplier(SoundType.class, "entity.ender_dragon.ambient", () -> (SoundType) SoundEvents.ENDER_DRAGON_AMBIENT)
            .registerSupplier(SoundType.class, "entity.ender_dragon.death", () -> (SoundType) SoundEvents.ENDER_DRAGON_DEATH)
            .registerSupplier(SoundType.class, "entity.ender_dragon.flap", () -> (SoundType) SoundEvents.ENDER_DRAGON_FLAP)
            .registerSupplier(SoundType.class, "entity.ender_dragon.growl", () -> (SoundType) SoundEvents.ENDER_DRAGON_GROWL)
            .registerSupplier(SoundType.class, "entity.ender_dragon.hurt", () -> (SoundType) SoundEvents.ENDER_DRAGON_HURT)
            .registerSupplier(SoundType.class, "entity.ender_dragon.shoot", () -> (SoundType) SoundEvents.ENDER_DRAGON_SHOOT)
            .registerSupplier(SoundType.class, "entity.ender_eye.death", () -> (SoundType) SoundEvents.ENDER_EYE_DEATH)
            .registerSupplier(SoundType.class, "entity.ender_eye.launch", () -> (SoundType) SoundEvents.ENDER_EYE_LAUNCH)
            .registerSupplier(SoundType.class, "entity.ender_pearl.throw", () -> (SoundType) SoundEvents.ENDER_PEARL_THROW)
            .registerSupplier(SoundType.class, "entity.enderman.ambient", () -> (SoundType) SoundEvents.ENDERMAN_AMBIENT)
            .registerSupplier(SoundType.class, "entity.enderman.death", () -> (SoundType) SoundEvents.ENDERMAN_DEATH)
            .registerSupplier(SoundType.class, "entity.enderman.hurt", () -> (SoundType) SoundEvents.ENDERMAN_HURT)
            .registerSupplier(SoundType.class, "entity.enderman.scream", () -> (SoundType) SoundEvents.ENDERMAN_SCREAM)
            .registerSupplier(SoundType.class, "entity.enderman.stare", () -> (SoundType) SoundEvents.ENDERMAN_STARE)
            .registerSupplier(SoundType.class, "entity.enderman.teleport", () -> (SoundType) SoundEvents.ENDERMAN_TELEPORT)
            .registerSupplier(SoundType.class, "entity.endermite.ambient", () -> (SoundType) SoundEvents.ENDERMITE_AMBIENT)
            .registerSupplier(SoundType.class, "entity.endermite.death", () -> (SoundType) SoundEvents.ENDERMITE_DEATH)
            .registerSupplier(SoundType.class, "entity.endermite.hurt", () -> (SoundType) SoundEvents.ENDERMITE_HURT)
            .registerSupplier(SoundType.class, "entity.endermite.step", () -> (SoundType) SoundEvents.ENDERMITE_STEP)
            .registerSupplier(SoundType.class, "entity.evoker.ambient", () -> (SoundType) SoundEvents.EVOKER_AMBIENT)
            .registerSupplier(SoundType.class, "entity.evoker.cast_spell", () -> (SoundType) SoundEvents.EVOKER_CAST_SPELL)
            .registerSupplier(SoundType.class, "entity.evoker.celebrate", () -> (SoundType) SoundEvents.EVOKER_CELEBRATE)
            .registerSupplier(SoundType.class, "entity.evoker.death", () -> (SoundType) SoundEvents.EVOKER_DEATH)
            .registerSupplier(SoundType.class, "entity.evoker.hurt", () -> (SoundType) SoundEvents.EVOKER_HURT)
            .registerSupplier(SoundType.class, "entity.evoker.prepare_attack", () -> (SoundType) SoundEvents.EVOKER_PREPARE_ATTACK)
            .registerSupplier(SoundType.class, "entity.evoker.prepare_summon", () -> (SoundType) SoundEvents.EVOKER_PREPARE_SUMMON)
            .registerSupplier(SoundType.class, "entity.evoker.prepare_wololo", () -> (SoundType) SoundEvents.EVOKER_PREPARE_WOLOLO)
            .registerSupplier(SoundType.class, "entity.evoker_fangs.attack", () -> (SoundType) SoundEvents.EVOKER_FANGS_ATTACK)
            .registerSupplier(SoundType.class, "entity.experience_bottle.throw", () -> (SoundType) SoundEvents.EXPERIENCE_BOTTLE_THROW)
            .registerSupplier(SoundType.class, "entity.experience_orb.pickup", () -> (SoundType) SoundEvents.EXPERIENCE_ORB_PICKUP)
            .registerSupplier(SoundType.class, "entity.firework_rocket.blast", () -> (SoundType) SoundEvents.FIREWORK_ROCKET_BLAST)
            .registerSupplier(SoundType.class, "entity.firework_rocket.blast_far", () -> (SoundType) SoundEvents.FIREWORK_ROCKET_BLAST_FAR)
            .registerSupplier(SoundType.class, "entity.firework_rocket.large_blast", () -> (SoundType) SoundEvents.FIREWORK_ROCKET_LARGE_BLAST)
            .registerSupplier(SoundType.class, "entity.firework_rocket.large_blast_far", () -> (SoundType) SoundEvents.FIREWORK_ROCKET_LARGE_BLAST_FAR)
            .registerSupplier(SoundType.class, "entity.firework_rocket.launch", () -> (SoundType) SoundEvents.FIREWORK_ROCKET_LAUNCH)
            .registerSupplier(SoundType.class, "entity.firework_rocket.shoot", () -> (SoundType) SoundEvents.FIREWORK_ROCKET_SHOOT)
            .registerSupplier(SoundType.class, "entity.firework_rocket.twinkle", () -> (SoundType) SoundEvents.FIREWORK_ROCKET_TWINKLE)
            .registerSupplier(SoundType.class, "entity.firework_rocket.twinkle_far", () -> (SoundType) SoundEvents.FIREWORK_ROCKET_TWINKLE_FAR)
            .registerSupplier(SoundType.class, "entity.fish.swim", () -> (SoundType) SoundEvents.FISH_SWIM)
            .registerSupplier(SoundType.class, "entity.fishing_bobber.retrieve", () -> (SoundType) SoundEvents.FISHING_BOBBER_RETRIEVE)
            .registerSupplier(SoundType.class, "entity.fishing_bobber.splash", () -> (SoundType) SoundEvents.FISHING_BOBBER_SPLASH)
            .registerSupplier(SoundType.class, "entity.fishing_bobber.throw", () -> (SoundType) SoundEvents.FISHING_BOBBER_THROW)
            .registerSupplier(SoundType.class, "entity.fox.aggro", () -> (SoundType) SoundEvents.FOX_AGGRO)
            .registerSupplier(SoundType.class, "entity.fox.ambient", () -> (SoundType) SoundEvents.FOX_AMBIENT)
            .registerSupplier(SoundType.class, "entity.fox.bite", () -> (SoundType) SoundEvents.FOX_BITE)
            .registerSupplier(SoundType.class, "entity.fox.death", () -> (SoundType) SoundEvents.FOX_DEATH)
            .registerSupplier(SoundType.class, "entity.fox.eat", () -> (SoundType) SoundEvents.FOX_EAT)
            .registerSupplier(SoundType.class, "entity.fox.hurt", () -> (SoundType) SoundEvents.FOX_HURT)
            .registerSupplier(SoundType.class, "entity.fox.screech", () -> (SoundType) SoundEvents.FOX_SCREECH)
            .registerSupplier(SoundType.class, "entity.fox.sleep", () -> (SoundType) SoundEvents.FOX_SLEEP)
            .registerSupplier(SoundType.class, "entity.fox.sniff", () -> (SoundType) SoundEvents.FOX_SNIFF)
            .registerSupplier(SoundType.class, "entity.fox.spit", () -> (SoundType) SoundEvents.FOX_SPIT)
            .registerSupplier(SoundType.class, "entity.fox.teleport", () -> (SoundType) SoundEvents.FOX_TELEPORT)
            .registerSupplier(SoundType.class, "entity.generic.big_fall", () -> (SoundType) SoundEvents.GENERIC_BIG_FALL)
            .registerSupplier(SoundType.class, "entity.generic.burn", () -> (SoundType) SoundEvents.GENERIC_BURN)
            .registerSupplier(SoundType.class, "entity.generic.death", () -> (SoundType) SoundEvents.GENERIC_DEATH)
            .registerSupplier(SoundType.class, "entity.generic.drink", () -> (SoundType) SoundEvents.GENERIC_DRINK)
            .registerSupplier(SoundType.class, "entity.generic.eat", () -> (SoundType) SoundEvents.GENERIC_EAT)
            .registerSupplier(SoundType.class, "entity.generic.explode", () -> (SoundType) SoundEvents.GENERIC_EXPLODE)
            .registerSupplier(SoundType.class, "entity.generic.extinguish_fire", () -> (SoundType) SoundEvents.GENERIC_EXTINGUISH_FIRE)
            .registerSupplier(SoundType.class, "entity.generic.hurt", () -> (SoundType) SoundEvents.GENERIC_HURT)
            .registerSupplier(SoundType.class, "entity.generic.small_fall", () -> (SoundType) SoundEvents.GENERIC_SMALL_FALL)
            .registerSupplier(SoundType.class, "entity.generic.splash", () -> (SoundType) SoundEvents.GENERIC_SPLASH)
            .registerSupplier(SoundType.class, "entity.generic.swim", () -> (SoundType) SoundEvents.GENERIC_SWIM)
            .registerSupplier(SoundType.class, "entity.ghast.ambient", () -> (SoundType) SoundEvents.GHAST_AMBIENT)
            .registerSupplier(SoundType.class, "entity.ghast.death", () -> (SoundType) SoundEvents.GHAST_DEATH)
            .registerSupplier(SoundType.class, "entity.ghast.hurt", () -> (SoundType) SoundEvents.GHAST_HURT)
            .registerSupplier(SoundType.class, "entity.ghast.scream", () -> (SoundType) SoundEvents.GHAST_SCREAM)
            .registerSupplier(SoundType.class, "entity.ghast.shoot", () -> (SoundType) SoundEvents.GHAST_SHOOT)
            .registerSupplier(SoundType.class, "entity.ghast.warn", () -> (SoundType) SoundEvents.GHAST_WARN)
            .registerSupplier(SoundType.class, "entity.guardian.ambient", () -> (SoundType) SoundEvents.GUARDIAN_AMBIENT)
            .registerSupplier(SoundType.class, "entity.guardian.ambient_land", () -> (SoundType) SoundEvents.GUARDIAN_AMBIENT_LAND)
            .registerSupplier(SoundType.class, "entity.guardian.attack", () -> (SoundType) SoundEvents.GUARDIAN_ATTACK)
            .registerSupplier(SoundType.class, "entity.guardian.death", () -> (SoundType) SoundEvents.GUARDIAN_DEATH)
            .registerSupplier(SoundType.class, "entity.guardian.death_land", () -> (SoundType) SoundEvents.GUARDIAN_DEATH_LAND)
            .registerSupplier(SoundType.class, "entity.guardian.flop", () -> (SoundType) SoundEvents.GUARDIAN_FLOP)
            .registerSupplier(SoundType.class, "entity.guardian.hurt", () -> (SoundType) SoundEvents.GUARDIAN_HURT)
            .registerSupplier(SoundType.class, "entity.guardian.hurt_land", () -> (SoundType) SoundEvents.GUARDIAN_HURT_LAND)
            .registerSupplier(SoundType.class, "entity.hoglin.ambient", () -> (SoundType) SoundEvents.HOGLIN_AMBIENT)
            .registerSupplier(SoundType.class, "entity.hoglin.angry", () -> (SoundType) SoundEvents.HOGLIN_ANGRY)
            .registerSupplier(SoundType.class, "entity.hoglin.attack", () -> (SoundType) SoundEvents.HOGLIN_ATTACK)
            .registerSupplier(SoundType.class, "entity.hoglin.converted_to_zombified", () -> (SoundType) SoundEvents.HOGLIN_CONVERTED_TO_ZOMBIFIED)
            .registerSupplier(SoundType.class, "entity.hoglin.death", () -> (SoundType) SoundEvents.HOGLIN_DEATH)
            .registerSupplier(SoundType.class, "entity.hoglin.hurt", () -> (SoundType) SoundEvents.HOGLIN_HURT)
            .registerSupplier(SoundType.class, "entity.hoglin.retreat", () -> (SoundType) SoundEvents.HOGLIN_RETREAT)
            .registerSupplier(SoundType.class, "entity.hoglin.step", () -> (SoundType) SoundEvents.HOGLIN_STEP)
            .registerSupplier(SoundType.class, "entity.horse.ambient", () -> (SoundType) SoundEvents.HORSE_AMBIENT)
            .registerSupplier(SoundType.class, "entity.horse.angry", () -> (SoundType) SoundEvents.HORSE_ANGRY)
            .registerSupplier(SoundType.class, "entity.horse.armor", () -> (SoundType) SoundEvents.HORSE_ARMOR)
            .registerSupplier(SoundType.class, "entity.horse.breathe", () -> (SoundType) SoundEvents.HORSE_BREATHE)
            .registerSupplier(SoundType.class, "entity.horse.death", () -> (SoundType) SoundEvents.HORSE_DEATH)
            .registerSupplier(SoundType.class, "entity.horse.eat", () -> (SoundType) SoundEvents.HORSE_EAT)
            .registerSupplier(SoundType.class, "entity.horse.gallop", () -> (SoundType) SoundEvents.HORSE_GALLOP)
            .registerSupplier(SoundType.class, "entity.horse.hurt", () -> (SoundType) SoundEvents.HORSE_HURT)
            .registerSupplier(SoundType.class, "entity.horse.jump", () -> (SoundType) SoundEvents.HORSE_JUMP)
            .registerSupplier(SoundType.class, "entity.horse.land", () -> (SoundType) SoundEvents.HORSE_LAND)
            .registerSupplier(SoundType.class, "entity.horse.saddle", () -> (SoundType) SoundEvents.HORSE_SADDLE)
            .registerSupplier(SoundType.class, "entity.horse.step", () -> (SoundType) SoundEvents.HORSE_STEP)
            .registerSupplier(SoundType.class, "entity.horse.step_wood", () -> (SoundType) SoundEvents.HORSE_STEP_WOOD)
            .registerSupplier(SoundType.class, "entity.hostile.big_fall", () -> (SoundType) SoundEvents.HOSTILE_BIG_FALL)
            .registerSupplier(SoundType.class, "entity.hostile.death", () -> (SoundType) SoundEvents.HOSTILE_DEATH)
            .registerSupplier(SoundType.class, "entity.hostile.hurt", () -> (SoundType) SoundEvents.HOSTILE_HURT)
            .registerSupplier(SoundType.class, "entity.hostile.small_fall", () -> (SoundType) SoundEvents.HOSTILE_SMALL_FALL)
            .registerSupplier(SoundType.class, "entity.hostile.splash", () -> (SoundType) SoundEvents.HOSTILE_SPLASH)
            .registerSupplier(SoundType.class, "entity.hostile.swim", () -> (SoundType) SoundEvents.HOSTILE_SWIM)
            .registerSupplier(SoundType.class, "entity.husk.ambient", () -> (SoundType) SoundEvents.HUSK_AMBIENT)
            .registerSupplier(SoundType.class, "entity.husk.converted_to_zombie", () -> (SoundType) SoundEvents.HUSK_CONVERTED_TO_ZOMBIE)
            .registerSupplier(SoundType.class, "entity.husk.death", () -> (SoundType) SoundEvents.HUSK_DEATH)
            .registerSupplier(SoundType.class, "entity.husk.hurt", () -> (SoundType) SoundEvents.HUSK_HURT)
            .registerSupplier(SoundType.class, "entity.husk.step", () -> (SoundType) SoundEvents.HUSK_STEP)
            .registerSupplier(SoundType.class, "entity.illusioner.ambient", () -> (SoundType) SoundEvents.ILLUSIONER_AMBIENT)
            .registerSupplier(SoundType.class, "entity.illusioner.cast_spell", () -> (SoundType) SoundEvents.ILLUSIONER_CAST_SPELL)
            .registerSupplier(SoundType.class, "entity.illusioner.death", () -> (SoundType) SoundEvents.ILLUSIONER_DEATH)
            .registerSupplier(SoundType.class, "entity.illusioner.hurt", () -> (SoundType) SoundEvents.ILLUSIONER_HURT)
            .registerSupplier(SoundType.class, "entity.illusioner.mirror_move", () -> (SoundType) SoundEvents.ILLUSIONER_MIRROR_MOVE)
            .registerSupplier(SoundType.class, "entity.illusioner.prepare_blindness", () -> (SoundType) SoundEvents.ILLUSIONER_PREPARE_BLINDNESS)
            .registerSupplier(SoundType.class, "entity.illusioner.prepare_mirror", () -> (SoundType) SoundEvents.ILLUSIONER_PREPARE_MIRROR)
            .registerSupplier(SoundType.class, "entity.iron_golem.attack", () -> (SoundType) SoundEvents.IRON_GOLEM_ATTACK)
            .registerSupplier(SoundType.class, "entity.iron_golem.damage", () -> (SoundType) SoundEvents.IRON_GOLEM_DAMAGE)
            .registerSupplier(SoundType.class, "entity.iron_golem.death", () -> (SoundType) SoundEvents.IRON_GOLEM_DEATH)
            .registerSupplier(SoundType.class, "entity.iron_golem.hurt", () -> (SoundType) SoundEvents.IRON_GOLEM_HURT)
            .registerSupplier(SoundType.class, "entity.iron_golem.repair", () -> (SoundType) SoundEvents.IRON_GOLEM_REPAIR)
            .registerSupplier(SoundType.class, "entity.iron_golem.step", () -> (SoundType) SoundEvents.IRON_GOLEM_STEP)
            .registerSupplier(SoundType.class, "entity.item.break", () -> (SoundType) SoundEvents.ITEM_BREAK)
            .registerSupplier(SoundType.class, "entity.item.pickup", () -> (SoundType) SoundEvents.ITEM_PICKUP)
            .registerSupplier(SoundType.class, "entity.item_frame.add_item", () -> (SoundType) SoundEvents.ITEM_FRAME_ADD_ITEM)
            .registerSupplier(SoundType.class, "entity.item_frame.break", () -> (SoundType) SoundEvents.ITEM_FRAME_BREAK)
            .registerSupplier(SoundType.class, "entity.item_frame.place", () -> (SoundType) SoundEvents.ITEM_FRAME_PLACE)
            .registerSupplier(SoundType.class, "entity.item_frame.remove_item", () -> (SoundType) SoundEvents.ITEM_FRAME_REMOVE_ITEM)
            .registerSupplier(SoundType.class, "entity.item_frame.rotate_item", () -> (SoundType) SoundEvents.ITEM_FRAME_ROTATE_ITEM)
            .registerSupplier(SoundType.class, "entity.leash_knot.break", () -> (SoundType) SoundEvents.LEASH_KNOT_BREAK)
            .registerSupplier(SoundType.class, "entity.leash_knot.place", () -> (SoundType) SoundEvents.LEASH_KNOT_PLACE)
            .registerSupplier(SoundType.class, "entity.lightning_bolt.impact", () -> (SoundType) SoundEvents.LIGHTNING_BOLT_IMPACT)
            .registerSupplier(SoundType.class, "entity.lightning_bolt.thunder", () -> (SoundType) SoundEvents.LIGHTNING_BOLT_THUNDER)
            .registerSupplier(SoundType.class, "entity.lingering_potion.throw", () -> (SoundType) SoundEvents.LINGERING_POTION_THROW)
            .registerSupplier(SoundType.class, "entity.llama.ambient", () -> (SoundType) SoundEvents.LLAMA_AMBIENT)
            .registerSupplier(SoundType.class, "entity.llama.angry", () -> (SoundType) SoundEvents.LLAMA_ANGRY)
            .registerSupplier(SoundType.class, "entity.llama.chest", () -> (SoundType) SoundEvents.LLAMA_CHEST)
            .registerSupplier(SoundType.class, "entity.llama.death", () -> (SoundType) SoundEvents.LLAMA_DEATH)
            .registerSupplier(SoundType.class, "entity.llama.eat", () -> (SoundType) SoundEvents.LLAMA_EAT)
            .registerSupplier(SoundType.class, "entity.llama.hurt", () -> (SoundType) SoundEvents.LLAMA_HURT)
            .registerSupplier(SoundType.class, "entity.llama.spit", () -> (SoundType) SoundEvents.LLAMA_SPIT)
            .registerSupplier(SoundType.class, "entity.llama.step", () -> (SoundType) SoundEvents.LLAMA_STEP)
            .registerSupplier(SoundType.class, "entity.llama.swag", () -> (SoundType) SoundEvents.LLAMA_SWAG)
            .registerSupplier(SoundType.class, "entity.magma_cube.death", () -> (SoundType) SoundEvents.MAGMA_CUBE_DEATH)
            .registerSupplier(SoundType.class, "entity.magma_cube.death_small", () -> (SoundType) SoundEvents.MAGMA_CUBE_DEATH_SMALL)
            .registerSupplier(SoundType.class, "entity.magma_cube.hurt", () -> (SoundType) SoundEvents.MAGMA_CUBE_HURT)
            .registerSupplier(SoundType.class, "entity.magma_cube.hurt_small", () -> (SoundType) SoundEvents.MAGMA_CUBE_HURT_SMALL)
            .registerSupplier(SoundType.class, "entity.magma_cube.jump", () -> (SoundType) SoundEvents.MAGMA_CUBE_JUMP)
            .registerSupplier(SoundType.class, "entity.magma_cube.squish", () -> (SoundType) SoundEvents.MAGMA_CUBE_SQUISH)
            .registerSupplier(SoundType.class, "entity.magma_cube.squish_small", () -> (SoundType) SoundEvents.MAGMA_CUBE_SQUISH_SMALL)
            .registerSupplier(SoundType.class, "entity.minecart.inside", () -> (SoundType) SoundEvents.MINECART_INSIDE)
            .registerSupplier(SoundType.class, "entity.minecart.riding", () -> (SoundType) SoundEvents.MINECART_RIDING)
            .registerSupplier(SoundType.class, "entity.mooshroom.convert", () -> (SoundType) SoundEvents.MOOSHROOM_CONVERT)
            .registerSupplier(SoundType.class, "entity.mooshroom.eat", () -> (SoundType) SoundEvents.MOOSHROOM_EAT)
            .registerSupplier(SoundType.class, "entity.mooshroom.milk", () -> (SoundType) SoundEvents.MOOSHROOM_MILK)
            .registerSupplier(SoundType.class, "entity.mooshroom.shear", () -> (SoundType) SoundEvents.MOOSHROOM_SHEAR)
            .registerSupplier(SoundType.class, "entity.mooshroom.suspicious_milk", () -> (SoundType) SoundEvents.MOOSHROOM_MILK_SUSPICIOUSLY)
            .registerSupplier(SoundType.class, "entity.mule.ambient", () -> (SoundType) SoundEvents.MULE_AMBIENT)
            .registerSupplier(SoundType.class, "entity.mule.angry", () -> (SoundType) SoundEvents.MULE_ANGRY)
            .registerSupplier(SoundType.class, "entity.mule.chest", () -> (SoundType) SoundEvents.MULE_CHEST)
            .registerSupplier(SoundType.class, "entity.mule.death", () -> (SoundType) SoundEvents.MULE_DEATH)
            .registerSupplier(SoundType.class, "entity.mule.eat", () -> (SoundType) SoundEvents.MULE_EAT)
            .registerSupplier(SoundType.class, "entity.mule.hurt", () -> (SoundType) SoundEvents.MULE_HURT)
            .registerSupplier(SoundType.class, "entity.ocelot.ambient", () -> (SoundType) SoundEvents.OCELOT_AMBIENT)
            .registerSupplier(SoundType.class, "entity.ocelot.death", () -> (SoundType) SoundEvents.OCELOT_DEATH)
            .registerSupplier(SoundType.class, "entity.ocelot.hurt", () -> (SoundType) SoundEvents.OCELOT_HURT)
            .registerSupplier(SoundType.class, "entity.painting.break", () -> (SoundType) SoundEvents.PAINTING_BREAK)
            .registerSupplier(SoundType.class, "entity.painting.place", () -> (SoundType) SoundEvents.PAINTING_PLACE)
            .registerSupplier(SoundType.class, "entity.panda.aggressive_ambient", () -> (SoundType) SoundEvents.PANDA_AGGRESSIVE_AMBIENT)
            .registerSupplier(SoundType.class, "entity.panda.ambient", () -> (SoundType) SoundEvents.PANDA_AMBIENT)
            .registerSupplier(SoundType.class, "entity.panda.bite", () -> (SoundType) SoundEvents.PANDA_BITE)
            .registerSupplier(SoundType.class, "entity.panda.cant_breed", () -> (SoundType) SoundEvents.PANDA_CANT_BREED)
            .registerSupplier(SoundType.class, "entity.panda.death", () -> (SoundType) SoundEvents.PANDA_DEATH)
            .registerSupplier(SoundType.class, "entity.panda.eat", () -> (SoundType) SoundEvents.PANDA_EAT)
            .registerSupplier(SoundType.class, "entity.panda.hurt", () -> (SoundType) SoundEvents.PANDA_HURT)
            .registerSupplier(SoundType.class, "entity.panda.pre_sneeze", () -> (SoundType) SoundEvents.PANDA_PRE_SNEEZE)
            .registerSupplier(SoundType.class, "entity.panda.sneeze", () -> (SoundType) SoundEvents.PANDA_SNEEZE)
            .registerSupplier(SoundType.class, "entity.panda.step", () -> (SoundType) SoundEvents.PANDA_STEP)
            .registerSupplier(SoundType.class, "entity.panda.worried_ambient", () -> (SoundType) SoundEvents.PANDA_WORRIED_AMBIENT)
            .registerSupplier(SoundType.class, "entity.parrot.ambient", () -> (SoundType) SoundEvents.PARROT_AMBIENT)
            .registerSupplier(SoundType.class, "entity.parrot.death", () -> (SoundType) SoundEvents.PARROT_DEATH)
            .registerSupplier(SoundType.class, "entity.parrot.eat", () -> (SoundType) SoundEvents.PARROT_EAT)
            .registerSupplier(SoundType.class, "entity.parrot.fly", () -> (SoundType) SoundEvents.PARROT_FLY)
            .registerSupplier(SoundType.class, "entity.parrot.hurt", () -> (SoundType) SoundEvents.PARROT_HURT)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.blaze", () -> (SoundType) SoundEvents.PARROT_IMITATE_BLAZE)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.creeper", () -> (SoundType) SoundEvents.PARROT_IMITATE_CREEPER)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.drowned", () -> (SoundType) SoundEvents.PARROT_IMITATE_DROWNED)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.elder_guardian", () -> (SoundType) SoundEvents.PARROT_IMITATE_ELDER_GUARDIAN)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.ender_dragon", () -> (SoundType) SoundEvents.PARROT_IMITATE_ENDER_DRAGON)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.endermite", () -> (SoundType) SoundEvents.PARROT_IMITATE_ENDERMITE)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.evoker", () -> (SoundType) SoundEvents.PARROT_IMITATE_EVOKER)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.ghast", () -> (SoundType) SoundEvents.PARROT_IMITATE_GHAST)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.guardian", () -> (SoundType) SoundEvents.PARROT_IMITATE_GUARDIAN)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.hoglin", () -> (SoundType) SoundEvents.PARROT_IMITATE_HOGLIN)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.husk", () -> (SoundType) SoundEvents.PARROT_IMITATE_HUSK)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.illusioner", () -> (SoundType) SoundEvents.PARROT_IMITATE_ILLUSIONER)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.magma_cube", () -> (SoundType) SoundEvents.PARROT_IMITATE_MAGMA_CUBE)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.phantom", () -> (SoundType) SoundEvents.PARROT_IMITATE_PHANTOM)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.piglin", () -> (SoundType) SoundEvents.PARROT_IMITATE_PIGLIN)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.piglin_brute", () -> (SoundType) SoundEvents.PARROT_IMITATE_PIGLIN_BRUTE)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.pillager", () -> (SoundType) SoundEvents.PARROT_IMITATE_PILLAGER)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.ravager", () -> (SoundType) SoundEvents.PARROT_IMITATE_RAVAGER)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.shulker", () -> (SoundType) SoundEvents.PARROT_IMITATE_SHULKER)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.silverfish", () -> (SoundType) SoundEvents.PARROT_IMITATE_SILVERFISH)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.skeleton", () -> (SoundType) SoundEvents.PARROT_IMITATE_SKELETON)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.slime", () -> (SoundType) SoundEvents.PARROT_IMITATE_SLIME)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.spider", () -> (SoundType) SoundEvents.PARROT_IMITATE_SPIDER)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.stray", () -> (SoundType) SoundEvents.PARROT_IMITATE_STRAY)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.vex", () -> (SoundType) SoundEvents.PARROT_IMITATE_VEX)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.vindicator", () -> (SoundType) SoundEvents.PARROT_IMITATE_VINDICATOR)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.witch", () -> (SoundType) SoundEvents.PARROT_IMITATE_WITCH)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.wither", () -> (SoundType) SoundEvents.PARROT_IMITATE_WITHER)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.wither_skeleton", () -> (SoundType) SoundEvents.PARROT_IMITATE_WITHER_SKELETON)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.zoglin", () -> (SoundType) SoundEvents.PARROT_IMITATE_ZOGLIN)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.zombie", () -> (SoundType) SoundEvents.PARROT_IMITATE_ZOMBIE)
            .registerSupplier(SoundType.class, "entity.parrot.imitate.zombie_villager", () -> (SoundType) SoundEvents.PARROT_IMITATE_ZOMBIE_VILLAGER)
            .registerSupplier(SoundType.class, "entity.parrot.step", () -> (SoundType) SoundEvents.PARROT_STEP)
            .registerSupplier(SoundType.class, "entity.phantom.ambient", () -> (SoundType) SoundEvents.PHANTOM_AMBIENT)
            .registerSupplier(SoundType.class, "entity.phantom.bite", () -> (SoundType) SoundEvents.PHANTOM_BITE)
            .registerSupplier(SoundType.class, "entity.phantom.death", () -> (SoundType) SoundEvents.PHANTOM_DEATH)
            .registerSupplier(SoundType.class, "entity.phantom.flap", () -> (SoundType) SoundEvents.PHANTOM_FLAP)
            .registerSupplier(SoundType.class, "entity.phantom.hurt", () -> (SoundType) SoundEvents.PHANTOM_HURT)
            .registerSupplier(SoundType.class, "entity.phantom.swoop", () -> (SoundType) SoundEvents.PHANTOM_SWOOP)
            .registerSupplier(SoundType.class, "entity.pig.ambient", () -> (SoundType) SoundEvents.PIG_AMBIENT)
            .registerSupplier(SoundType.class, "entity.pig.death", () -> (SoundType) SoundEvents.PIG_DEATH)
            .registerSupplier(SoundType.class, "entity.pig.hurt", () -> (SoundType) SoundEvents.PIG_HURT)
            .registerSupplier(SoundType.class, "entity.pig.saddle", () -> (SoundType) SoundEvents.PIG_SADDLE)
            .registerSupplier(SoundType.class, "entity.pig.step", () -> (SoundType) SoundEvents.PIG_STEP)
            .registerSupplier(SoundType.class, "entity.piglin.admiring_item", () -> (SoundType) SoundEvents.PIGLIN_ADMIRING_ITEM)
            .registerSupplier(SoundType.class, "entity.piglin.ambient", () -> (SoundType) SoundEvents.PIGLIN_AMBIENT)
            .registerSupplier(SoundType.class, "entity.piglin.angry", () -> (SoundType) SoundEvents.PIGLIN_ANGRY)
            .registerSupplier(SoundType.class, "entity.piglin.celebrate", () -> (SoundType) SoundEvents.PIGLIN_CELEBRATE)
            .registerSupplier(SoundType.class, "entity.piglin.converted_to_zombified", () -> (SoundType) SoundEvents.PIGLIN_CONVERTED_TO_ZOMBIFIED)
            .registerSupplier(SoundType.class, "entity.piglin.death", () -> (SoundType) SoundEvents.PIGLIN_DEATH)
            .registerSupplier(SoundType.class, "entity.piglin.hurt", () -> (SoundType) SoundEvents.PIGLIN_HURT)
            .registerSupplier(SoundType.class, "entity.piglin.jealous", () -> (SoundType) SoundEvents.PIGLIN_JEALOUS)
            .registerSupplier(SoundType.class, "entity.piglin.retreat", () -> (SoundType) SoundEvents.PIGLIN_RETREAT)
            .registerSupplier(SoundType.class, "entity.piglin.step", () -> (SoundType) SoundEvents.PIGLIN_STEP)
            .registerSupplier(SoundType.class, "entity.piglin_brute.ambient", () -> (SoundType) SoundEvents.PIGLIN_BRUTE_AMBIENT)
            .registerSupplier(SoundType.class, "entity.piglin_brute.angry", () -> (SoundType) SoundEvents.PIGLIN_BRUTE_ANGRY)
            .registerSupplier(SoundType.class, "entity.piglin_brute.converted_to_zombified", () -> (SoundType) SoundEvents.PIGLIN_BRUTE_CONVERTED_TO_ZOMBIFIED)
            .registerSupplier(SoundType.class, "entity.piglin_brute.death", () -> (SoundType) SoundEvents.PIGLIN_BRUTE_DEATH)
            .registerSupplier(SoundType.class, "entity.piglin_brute.hurt", () -> (SoundType) SoundEvents.PIGLIN_BRUTE_HURT)
            .registerSupplier(SoundType.class, "entity.piglin_brute.step", () -> (SoundType) SoundEvents.PIGLIN_BRUTE_STEP)
            .registerSupplier(SoundType.class, "entity.pillager.ambient", () -> (SoundType) SoundEvents.PILLAGER_AMBIENT)
            .registerSupplier(SoundType.class, "entity.pillager.celebrate", () -> (SoundType) SoundEvents.PILLAGER_CELEBRATE)
            .registerSupplier(SoundType.class, "entity.pillager.death", () -> (SoundType) SoundEvents.PILLAGER_DEATH)
            .registerSupplier(SoundType.class, "entity.pillager.hurt", () -> (SoundType) SoundEvents.PILLAGER_HURT)
            .registerSupplier(SoundType.class, "entity.player.attack.crit", () -> (SoundType) SoundEvents.PLAYER_ATTACK_CRIT)
            .registerSupplier(SoundType.class, "entity.player.attack.knockback", () -> (SoundType) SoundEvents.PLAYER_ATTACK_KNOCKBACK)
            .registerSupplier(SoundType.class, "entity.player.attack.nodamage", () -> (SoundType) SoundEvents.PLAYER_ATTACK_NODAMAGE)
            .registerSupplier(SoundType.class, "entity.player.attack.strong", () -> (SoundType) SoundEvents.PLAYER_ATTACK_STRONG)
            .registerSupplier(SoundType.class, "entity.player.attack.sweep", () -> (SoundType) SoundEvents.PLAYER_ATTACK_SWEEP)
            .registerSupplier(SoundType.class, "entity.player.attack.weak", () -> (SoundType) SoundEvents.PLAYER_ATTACK_WEAK)
            .registerSupplier(SoundType.class, "entity.player.big_fall", () -> (SoundType) SoundEvents.PLAYER_BIG_FALL)
            .registerSupplier(SoundType.class, "entity.player.breath", () -> (SoundType) SoundEvents.PLAYER_BREATH)
            .registerSupplier(SoundType.class, "entity.player.burp", () -> (SoundType) SoundEvents.PLAYER_BURP)
            .registerSupplier(SoundType.class, "entity.player.death", () -> (SoundType) SoundEvents.PLAYER_DEATH)
            .registerSupplier(SoundType.class, "entity.player.hurt", () -> (SoundType) SoundEvents.PLAYER_HURT)
            .registerSupplier(SoundType.class, "entity.player.hurt_drown", () -> (SoundType) SoundEvents.PLAYER_HURT_DROWN)
            .registerSupplier(SoundType.class, "entity.player.hurt_on_fire", () -> (SoundType) SoundEvents.PLAYER_HURT_ON_FIRE)
            .registerSupplier(SoundType.class, "entity.player.hurt_sweet_berry_bush", () -> (SoundType) SoundEvents.PLAYER_HURT_SWEET_BERRY_BUSH)
            .registerSupplier(SoundType.class, "entity.player.levelup", () -> (SoundType) SoundEvents.PLAYER_LEVELUP)
            .registerSupplier(SoundType.class, "entity.player.small_fall", () -> (SoundType) SoundEvents.PLAYER_SMALL_FALL)
            .registerSupplier(SoundType.class, "entity.player.splash", () -> (SoundType) SoundEvents.PLAYER_SPLASH)
            .registerSupplier(SoundType.class, "entity.player.splash.high_speed", () -> (SoundType) SoundEvents.PLAYER_SPLASH_HIGH_SPEED)
            .registerSupplier(SoundType.class, "entity.player.swim", () -> (SoundType) SoundEvents.PLAYER_SWIM)
            .registerSupplier(SoundType.class, "entity.polar_bear.ambient", () -> (SoundType) SoundEvents.POLAR_BEAR_AMBIENT)
            .registerSupplier(SoundType.class, "entity.polar_bear.ambient_baby", () -> (SoundType) SoundEvents.POLAR_BEAR_AMBIENT_BABY)
            .registerSupplier(SoundType.class, "entity.polar_bear.death", () -> (SoundType) SoundEvents.POLAR_BEAR_DEATH)
            .registerSupplier(SoundType.class, "entity.polar_bear.hurt", () -> (SoundType) SoundEvents.POLAR_BEAR_HURT)
            .registerSupplier(SoundType.class, "entity.polar_bear.step", () -> (SoundType) SoundEvents.POLAR_BEAR_STEP)
            .registerSupplier(SoundType.class, "entity.polar_bear.warning", () -> (SoundType) SoundEvents.POLAR_BEAR_WARNING)
            .registerSupplier(SoundType.class, "entity.puffer_fish.ambient", () -> (SoundType) SoundEvents.PUFFER_FISH_AMBIENT)
            .registerSupplier(SoundType.class, "entity.puffer_fish.blow_out", () -> (SoundType) SoundEvents.PUFFER_FISH_BLOW_OUT)
            .registerSupplier(SoundType.class, "entity.puffer_fish.blow_up", () -> (SoundType) SoundEvents.PUFFER_FISH_BLOW_UP)
            .registerSupplier(SoundType.class, "entity.puffer_fish.death", () -> (SoundType) SoundEvents.PUFFER_FISH_DEATH)
            .registerSupplier(SoundType.class, "entity.puffer_fish.flop", () -> (SoundType) SoundEvents.PUFFER_FISH_FLOP)
            .registerSupplier(SoundType.class, "entity.puffer_fish.hurt", () -> (SoundType) SoundEvents.PUFFER_FISH_HURT)
            .registerSupplier(SoundType.class, "entity.puffer_fish.sting", () -> (SoundType) SoundEvents.PUFFER_FISH_STING)
            .registerSupplier(SoundType.class, "entity.rabbit.ambient", () -> (SoundType) SoundEvents.RABBIT_AMBIENT)
            .registerSupplier(SoundType.class, "entity.rabbit.attack", () -> (SoundType) SoundEvents.RABBIT_ATTACK)
            .registerSupplier(SoundType.class, "entity.rabbit.death", () -> (SoundType) SoundEvents.RABBIT_DEATH)
            .registerSupplier(SoundType.class, "entity.rabbit.hurt", () -> (SoundType) SoundEvents.RABBIT_HURT)
            .registerSupplier(SoundType.class, "entity.rabbit.jump", () -> (SoundType) SoundEvents.RABBIT_JUMP)
            .registerSupplier(SoundType.class, "entity.ravager.ambient", () -> (SoundType) SoundEvents.RAVAGER_AMBIENT)
            .registerSupplier(SoundType.class, "entity.ravager.attack", () -> (SoundType) SoundEvents.RAVAGER_ATTACK)
            .registerSupplier(SoundType.class, "entity.ravager.celebrate", () -> (SoundType) SoundEvents.RAVAGER_CELEBRATE)
            .registerSupplier(SoundType.class, "entity.ravager.death", () -> (SoundType) SoundEvents.RAVAGER_DEATH)
            .registerSupplier(SoundType.class, "entity.ravager.hurt", () -> (SoundType) SoundEvents.RAVAGER_HURT)
            .registerSupplier(SoundType.class, "entity.ravager.roar", () -> (SoundType) SoundEvents.RAVAGER_ROAR)
            .registerSupplier(SoundType.class, "entity.ravager.step", () -> (SoundType) SoundEvents.RAVAGER_STEP)
            .registerSupplier(SoundType.class, "entity.ravager.stunned", () -> (SoundType) SoundEvents.RAVAGER_STUNNED)
            .registerSupplier(SoundType.class, "entity.salmon.ambient", () -> (SoundType) SoundEvents.SALMON_AMBIENT)
            .registerSupplier(SoundType.class, "entity.salmon.death", () -> (SoundType) SoundEvents.SALMON_DEATH)
            .registerSupplier(SoundType.class, "entity.salmon.flop", () -> (SoundType) SoundEvents.SALMON_FLOP)
            .registerSupplier(SoundType.class, "entity.salmon.hurt", () -> (SoundType) SoundEvents.SALMON_HURT)
            .registerSupplier(SoundType.class, "entity.sheep.ambient", () -> (SoundType) SoundEvents.SHEEP_AMBIENT)
            .registerSupplier(SoundType.class, "entity.sheep.death", () -> (SoundType) SoundEvents.SHEEP_DEATH)
            .registerSupplier(SoundType.class, "entity.sheep.hurt", () -> (SoundType) SoundEvents.SHEEP_HURT)
            .registerSupplier(SoundType.class, "entity.sheep.shear", () -> (SoundType) SoundEvents.SHEEP_SHEAR)
            .registerSupplier(SoundType.class, "entity.sheep.step", () -> (SoundType) SoundEvents.SHEEP_STEP)
            .registerSupplier(SoundType.class, "entity.shulker.ambient", () -> (SoundType) SoundEvents.SHULKER_AMBIENT)
            .registerSupplier(SoundType.class, "entity.shulker.close", () -> (SoundType) SoundEvents.SHULKER_CLOSE)
            .registerSupplier(SoundType.class, "entity.shulker.death", () -> (SoundType) SoundEvents.SHULKER_DEATH)
            .registerSupplier(SoundType.class, "entity.shulker.hurt", () -> (SoundType) SoundEvents.SHULKER_HURT)
            .registerSupplier(SoundType.class, "entity.shulker.hurt_closed", () -> (SoundType) SoundEvents.SHULKER_HURT_CLOSED)
            .registerSupplier(SoundType.class, "entity.shulker.open", () -> (SoundType) SoundEvents.SHULKER_OPEN)
            .registerSupplier(SoundType.class, "entity.shulker.shoot", () -> (SoundType) SoundEvents.SHULKER_SHOOT)
            .registerSupplier(SoundType.class, "entity.shulker.teleport", () -> (SoundType) SoundEvents.SHULKER_TELEPORT)
            .registerSupplier(SoundType.class, "entity.shulker_bullet.hit", () -> (SoundType) SoundEvents.SHULKER_BULLET_HIT)
            .registerSupplier(SoundType.class, "entity.shulker_bullet.hurt", () -> (SoundType) SoundEvents.SHULKER_BULLET_HURT)
            .registerSupplier(SoundType.class, "entity.silverfish.ambient", () -> (SoundType) SoundEvents.SILVERFISH_AMBIENT)
            .registerSupplier(SoundType.class, "entity.silverfish.death", () -> (SoundType) SoundEvents.SILVERFISH_DEATH)
            .registerSupplier(SoundType.class, "entity.silverfish.hurt", () -> (SoundType) SoundEvents.SILVERFISH_HURT)
            .registerSupplier(SoundType.class, "entity.silverfish.step", () -> (SoundType) SoundEvents.SILVERFISH_STEP)
            .registerSupplier(SoundType.class, "entity.skeleton.ambient", () -> (SoundType) SoundEvents.SKELETON_AMBIENT)
            .registerSupplier(SoundType.class, "entity.skeleton.death", () -> (SoundType) SoundEvents.SKELETON_DEATH)
            .registerSupplier(SoundType.class, "entity.skeleton.hurt", () -> (SoundType) SoundEvents.SKELETON_HURT)
            .registerSupplier(SoundType.class, "entity.skeleton.shoot", () -> (SoundType) SoundEvents.SKELETON_SHOOT)
            .registerSupplier(SoundType.class, "entity.skeleton.step", () -> (SoundType) SoundEvents.SKELETON_STEP)
            .registerSupplier(SoundType.class, "entity.skeleton_horse.ambient", () -> (SoundType) SoundEvents.SKELETON_HORSE_AMBIENT)
            .registerSupplier(SoundType.class, "entity.skeleton_horse.ambient_water", () -> (SoundType) SoundEvents.SKELETON_HORSE_AMBIENT_WATER)
            .registerSupplier(SoundType.class, "entity.skeleton_horse.death", () -> (SoundType) SoundEvents.SKELETON_HORSE_DEATH)
            .registerSupplier(SoundType.class, "entity.skeleton_horse.gallop_water", () -> (SoundType) SoundEvents.SKELETON_HORSE_GALLOP_WATER)
            .registerSupplier(SoundType.class, "entity.skeleton_horse.hurt", () -> (SoundType) SoundEvents.SKELETON_HORSE_HURT)
            .registerSupplier(SoundType.class, "entity.skeleton_horse.jump_water", () -> (SoundType) SoundEvents.SKELETON_HORSE_JUMP_WATER)
            .registerSupplier(SoundType.class, "entity.skeleton_horse.step_water", () -> (SoundType) SoundEvents.SKELETON_HORSE_STEP_WATER)
            .registerSupplier(SoundType.class, "entity.skeleton_horse.swim", () -> (SoundType) SoundEvents.SKELETON_HORSE_SWIM)
            .registerSupplier(SoundType.class, "entity.slime.attack", () -> (SoundType) SoundEvents.SLIME_ATTACK)
            .registerSupplier(SoundType.class, "entity.slime.death", () -> (SoundType) SoundEvents.SLIME_DEATH)
            .registerSupplier(SoundType.class, "entity.slime.death_small", () -> (SoundType) SoundEvents.SLIME_DEATH_SMALL)
            .registerSupplier(SoundType.class, "entity.slime.hurt", () -> (SoundType) SoundEvents.SLIME_HURT)
            .registerSupplier(SoundType.class, "entity.slime.hurt_small", () -> (SoundType) SoundEvents.SLIME_HURT_SMALL)
            .registerSupplier(SoundType.class, "entity.slime.jump", () -> (SoundType) SoundEvents.SLIME_JUMP)
            .registerSupplier(SoundType.class, "entity.slime.jump_small", () -> (SoundType) SoundEvents.SLIME_JUMP_SMALL)
            .registerSupplier(SoundType.class, "entity.slime.squish", () -> (SoundType) SoundEvents.SLIME_SQUISH)
            .registerSupplier(SoundType.class, "entity.slime.squish_small", () -> (SoundType) SoundEvents.SLIME_SQUISH_SMALL)
            .registerSupplier(SoundType.class, "entity.snow_golem.ambient", () -> (SoundType) SoundEvents.SNOW_GOLEM_AMBIENT)
            .registerSupplier(SoundType.class, "entity.snow_golem.death", () -> (SoundType) SoundEvents.SNOW_GOLEM_DEATH)
            .registerSupplier(SoundType.class, "entity.snow_golem.hurt", () -> (SoundType) SoundEvents.SNOW_GOLEM_HURT)
            .registerSupplier(SoundType.class, "entity.snow_golem.shear", () -> (SoundType) SoundEvents.SNOW_GOLEM_SHEAR)
            .registerSupplier(SoundType.class, "entity.snow_golem.shoot", () -> (SoundType) SoundEvents.SNOW_GOLEM_SHOOT)
            .registerSupplier(SoundType.class, "entity.snowball.throw", () -> (SoundType) SoundEvents.SNOWBALL_THROW)
            .registerSupplier(SoundType.class, "entity.spider.ambient", () -> (SoundType) SoundEvents.SPIDER_AMBIENT)
            .registerSupplier(SoundType.class, "entity.spider.death", () -> (SoundType) SoundEvents.SPIDER_DEATH)
            .registerSupplier(SoundType.class, "entity.spider.hurt", () -> (SoundType) SoundEvents.SPIDER_HURT)
            .registerSupplier(SoundType.class, "entity.spider.step", () -> (SoundType) SoundEvents.SPIDER_STEP)
            .registerSupplier(SoundType.class, "entity.splash_potion.break", () -> (SoundType) SoundEvents.SPLASH_POTION_BREAK)
            .registerSupplier(SoundType.class, "entity.splash_potion.throw", () -> (SoundType) SoundEvents.SPLASH_POTION_THROW)
            .registerSupplier(SoundType.class, "entity.squid.ambient", () -> (SoundType) SoundEvents.SQUID_AMBIENT)
            .registerSupplier(SoundType.class, "entity.squid.death", () -> (SoundType) SoundEvents.SQUID_DEATH)
            .registerSupplier(SoundType.class, "entity.squid.hurt", () -> (SoundType) SoundEvents.SQUID_HURT)
            .registerSupplier(SoundType.class, "entity.squid.squirt", () -> (SoundType) SoundEvents.SQUID_SQUIRT)
            .registerSupplier(SoundType.class, "entity.stray.ambient", () -> (SoundType) SoundEvents.STRAY_AMBIENT)
            .registerSupplier(SoundType.class, "entity.stray.death", () -> (SoundType) SoundEvents.STRAY_DEATH)
            .registerSupplier(SoundType.class, "entity.stray.hurt", () -> (SoundType) SoundEvents.STRAY_HURT)
            .registerSupplier(SoundType.class, "entity.stray.step", () -> (SoundType) SoundEvents.STRAY_STEP)
            .registerSupplier(SoundType.class, "entity.strider.ambient", () -> (SoundType) SoundEvents.STRIDER_AMBIENT)
            .registerSupplier(SoundType.class, "entity.strider.death", () -> (SoundType) SoundEvents.STRIDER_DEATH)
            .registerSupplier(SoundType.class, "entity.strider.eat", () -> (SoundType) SoundEvents.STRIDER_EAT)
            .registerSupplier(SoundType.class, "entity.strider.happy", () -> (SoundType) SoundEvents.STRIDER_HAPPY)
            .registerSupplier(SoundType.class, "entity.strider.hurt", () -> (SoundType) SoundEvents.STRIDER_HURT)
            .registerSupplier(SoundType.class, "entity.strider.retreat", () -> (SoundType) SoundEvents.STRIDER_RETREAT)
            .registerSupplier(SoundType.class, "entity.strider.saddle", () -> (SoundType) SoundEvents.STRIDER_SADDLE)
            .registerSupplier(SoundType.class, "entity.strider.step", () -> (SoundType) SoundEvents.STRIDER_STEP)
            .registerSupplier(SoundType.class, "entity.strider.step_lava", () -> (SoundType) SoundEvents.STRIDER_STEP_LAVA)
            .registerSupplier(SoundType.class, "entity.tnt.primed", () -> (SoundType) SoundEvents.TNT_PRIMED)
            .registerSupplier(SoundType.class, "entity.tropical_fish.ambient", () -> (SoundType) SoundEvents.TROPICAL_FISH_AMBIENT)
            .registerSupplier(SoundType.class, "entity.tropical_fish.death", () -> (SoundType) SoundEvents.TROPICAL_FISH_DEATH)
            .registerSupplier(SoundType.class, "entity.tropical_fish.flop", () -> (SoundType) SoundEvents.TROPICAL_FISH_FLOP)
            .registerSupplier(SoundType.class, "entity.tropical_fish.hurt", () -> (SoundType) SoundEvents.TROPICAL_FISH_HURT)
            .registerSupplier(SoundType.class, "entity.turtle.ambient_land", () -> (SoundType) SoundEvents.TURTLE_AMBIENT_LAND)
            .registerSupplier(SoundType.class, "entity.turtle.death", () -> (SoundType) SoundEvents.TURTLE_DEATH)
            .registerSupplier(SoundType.class, "entity.turtle.death_baby", () -> (SoundType) SoundEvents.TURTLE_DEATH_BABY)
            .registerSupplier(SoundType.class, "entity.turtle.egg_break", () -> (SoundType) SoundEvents.TURTLE_EGG_BREAK)
            .registerSupplier(SoundType.class, "entity.turtle.egg_crack", () -> (SoundType) SoundEvents.TURTLE_EGG_CRACK)
            .registerSupplier(SoundType.class, "entity.turtle.egg_hatch", () -> (SoundType) SoundEvents.TURTLE_EGG_HATCH)
            .registerSupplier(SoundType.class, "entity.turtle.hurt", () -> (SoundType) SoundEvents.TURTLE_HURT)
            .registerSupplier(SoundType.class, "entity.turtle.hurt_baby", () -> (SoundType) SoundEvents.TURTLE_HURT_BABY)
            .registerSupplier(SoundType.class, "entity.turtle.lay_egg", () -> (SoundType) SoundEvents.TURTLE_LAY_EGG)
            .registerSupplier(SoundType.class, "entity.turtle.shamble", () -> (SoundType) SoundEvents.TURTLE_SHAMBLE)
            .registerSupplier(SoundType.class, "entity.turtle.shamble_baby", () -> (SoundType) SoundEvents.TURTLE_SHAMBLE_BABY)
            .registerSupplier(SoundType.class, "entity.turtle.swim", () -> (SoundType) SoundEvents.TURTLE_SWIM)
            .registerSupplier(SoundType.class, "entity.vex.ambient", () -> (SoundType) SoundEvents.VEX_AMBIENT)
            .registerSupplier(SoundType.class, "entity.vex.charge", () -> (SoundType) SoundEvents.VEX_CHARGE)
            .registerSupplier(SoundType.class, "entity.vex.death", () -> (SoundType) SoundEvents.VEX_DEATH)
            .registerSupplier(SoundType.class, "entity.vex.hurt", () -> (SoundType) SoundEvents.VEX_HURT)
            .registerSupplier(SoundType.class, "entity.villager.ambient", () -> (SoundType) SoundEvents.VILLAGER_AMBIENT)
            .registerSupplier(SoundType.class, "entity.villager.celebrate", () -> (SoundType) SoundEvents.VILLAGER_CELEBRATE)
            .registerSupplier(SoundType.class, "entity.villager.death", () -> (SoundType) SoundEvents.VILLAGER_DEATH)
            .registerSupplier(SoundType.class, "entity.villager.hurt", () -> (SoundType) SoundEvents.VILLAGER_HURT)
            .registerSupplier(SoundType.class, "entity.villager.no", () -> (SoundType) SoundEvents.VILLAGER_NO)
            .registerSupplier(SoundType.class, "entity.villager.trade", () -> (SoundType) SoundEvents.VILLAGER_TRADE)
            .registerSupplier(SoundType.class, "entity.villager.work_armorer", () -> (SoundType) SoundEvents.VILLAGER_WORK_ARMORER)
            .registerSupplier(SoundType.class, "entity.villager.work_butcher", () -> (SoundType) SoundEvents.VILLAGER_WORK_BUTCHER)
            .registerSupplier(SoundType.class, "entity.villager.work_cartographer", () -> (SoundType) SoundEvents.VILLAGER_WORK_CARTOGRAPHER)
            .registerSupplier(SoundType.class, "entity.villager.work_cleric", () -> (SoundType) SoundEvents.VILLAGER_WORK_CLERIC)
            .registerSupplier(SoundType.class, "entity.villager.work_farmer", () -> (SoundType) SoundEvents.VILLAGER_WORK_FARMER)
            .registerSupplier(SoundType.class, "entity.villager.work_fisherman", () -> (SoundType) SoundEvents.VILLAGER_WORK_FISHERMAN)
            .registerSupplier(SoundType.class, "entity.villager.work_fletcher", () -> (SoundType) SoundEvents.VILLAGER_WORK_FLETCHER)
            .registerSupplier(SoundType.class, "entity.villager.work_leatherworker", () -> (SoundType) SoundEvents.VILLAGER_WORK_LEATHERWORKER)
            .registerSupplier(SoundType.class, "entity.villager.work_librarian", () -> (SoundType) SoundEvents.VILLAGER_WORK_LIBRARIAN)
            .registerSupplier(SoundType.class, "entity.villager.work_mason", () -> (SoundType) SoundEvents.VILLAGER_WORK_MASON)
            .registerSupplier(SoundType.class, "entity.villager.work_shepherd", () -> (SoundType) SoundEvents.VILLAGER_WORK_SHEPHERD)
            .registerSupplier(SoundType.class, "entity.villager.work_toolsmith", () -> (SoundType) SoundEvents.VILLAGER_WORK_TOOLSMITH)
            .registerSupplier(SoundType.class, "entity.villager.work_weaponsmith", () -> (SoundType) SoundEvents.VILLAGER_WORK_WEAPONSMITH)
            .registerSupplier(SoundType.class, "entity.villager.yes", () -> (SoundType) SoundEvents.VILLAGER_YES)
            .registerSupplier(SoundType.class, "entity.vindicator.ambient", () -> (SoundType) SoundEvents.VINDICATOR_AMBIENT)
            .registerSupplier(SoundType.class, "entity.vindicator.celebrate", () -> (SoundType) SoundEvents.VINDICATOR_CELEBRATE)
            .registerSupplier(SoundType.class, "entity.vindicator.death", () -> (SoundType) SoundEvents.VINDICATOR_DEATH)
            .registerSupplier(SoundType.class, "entity.vindicator.hurt", () -> (SoundType) SoundEvents.VINDICATOR_HURT)
            .registerSupplier(SoundType.class, "entity.wandering_trader.ambient", () -> (SoundType) SoundEvents.WANDERING_TRADER_AMBIENT)
            .registerSupplier(SoundType.class, "entity.wandering_trader.death", () -> (SoundType) SoundEvents.WANDERING_TRADER_DEATH)
            .registerSupplier(SoundType.class, "entity.wandering_trader.disappeared", () -> (SoundType) SoundEvents.WANDERING_TRADER_DISAPPEARED)
            .registerSupplier(SoundType.class, "entity.wandering_trader.drink_milk", () -> (SoundType) SoundEvents.WANDERING_TRADER_DRINK_MILK)
            .registerSupplier(SoundType.class, "entity.wandering_trader.drink_potion", () -> (SoundType) SoundEvents.WANDERING_TRADER_DRINK_POTION)
            .registerSupplier(SoundType.class, "entity.wandering_trader.hurt", () -> (SoundType) SoundEvents.WANDERING_TRADER_HURT)
            .registerSupplier(SoundType.class, "entity.wandering_trader.no", () -> (SoundType) SoundEvents.WANDERING_TRADER_NO)
            .registerSupplier(SoundType.class, "entity.wandering_trader.reappeared", () -> (SoundType) SoundEvents.WANDERING_TRADER_REAPPEARED)
            .registerSupplier(SoundType.class, "entity.wandering_trader.trade", () -> (SoundType) SoundEvents.WANDERING_TRADER_TRADE)
            .registerSupplier(SoundType.class, "entity.wandering_trader.yes", () -> (SoundType) SoundEvents.WANDERING_TRADER_YES)
            .registerSupplier(SoundType.class, "entity.witch.ambient", () -> (SoundType) SoundEvents.WITCH_AMBIENT)
            .registerSupplier(SoundType.class, "entity.witch.celebrate", () -> (SoundType) SoundEvents.WITCH_CELEBRATE)
            .registerSupplier(SoundType.class, "entity.witch.death", () -> (SoundType) SoundEvents.WITCH_DEATH)
            .registerSupplier(SoundType.class, "entity.witch.drink", () -> (SoundType) SoundEvents.WITCH_DRINK)
            .registerSupplier(SoundType.class, "entity.witch.hurt", () -> (SoundType) SoundEvents.WITCH_HURT)
            .registerSupplier(SoundType.class, "entity.witch.throw", () -> (SoundType) SoundEvents.WITCH_THROW)
            .registerSupplier(SoundType.class, "entity.wither.ambient", () -> (SoundType) SoundEvents.WITHER_AMBIENT)
            .registerSupplier(SoundType.class, "entity.wither.break_block", () -> (SoundType) SoundEvents.WITHER_BREAK_BLOCK)
            .registerSupplier(SoundType.class, "entity.wither.death", () -> (SoundType) SoundEvents.WITHER_DEATH)
            .registerSupplier(SoundType.class, "entity.wither.hurt", () -> (SoundType) SoundEvents.WITHER_HURT)
            .registerSupplier(SoundType.class, "entity.wither.shoot", () -> (SoundType) SoundEvents.WITHER_SHOOT)
            .registerSupplier(SoundType.class, "entity.wither.spawn", () -> (SoundType) SoundEvents.WITHER_SPAWN)
            .registerSupplier(SoundType.class, "entity.wither_skeleton.ambient", () -> (SoundType) SoundEvents.WITHER_SKELETON_AMBIENT)
            .registerSupplier(SoundType.class, "entity.wither_skeleton.death", () -> (SoundType) SoundEvents.WITHER_SKELETON_DEATH)
            .registerSupplier(SoundType.class, "entity.wither_skeleton.hurt", () -> (SoundType) SoundEvents.WITHER_SKELETON_HURT)
            .registerSupplier(SoundType.class, "entity.wither_skeleton.step", () -> (SoundType) SoundEvents.WITHER_SKELETON_STEP)
            .registerSupplier(SoundType.class, "entity.wolf.ambient", () -> (SoundType) SoundEvents.WOLF_AMBIENT)
            .registerSupplier(SoundType.class, "entity.wolf.death", () -> (SoundType) SoundEvents.WOLF_DEATH)
            .registerSupplier(SoundType.class, "entity.wolf.growl", () -> (SoundType) SoundEvents.WOLF_GROWL)
            .registerSupplier(SoundType.class, "entity.wolf.howl", () -> (SoundType) SoundEvents.WOLF_HOWL)
            .registerSupplier(SoundType.class, "entity.wolf.hurt", () -> (SoundType) SoundEvents.WOLF_HURT)
            .registerSupplier(SoundType.class, "entity.wolf.pant", () -> (SoundType) SoundEvents.WOLF_PANT)
            .registerSupplier(SoundType.class, "entity.wolf.shake", () -> (SoundType) SoundEvents.WOLF_SHAKE)
            .registerSupplier(SoundType.class, "entity.wolf.step", () -> (SoundType) SoundEvents.WOLF_STEP)
            .registerSupplier(SoundType.class, "entity.wolf.whine", () -> (SoundType) SoundEvents.WOLF_WHINE)
            .registerSupplier(SoundType.class, "entity.zoglin.ambient", () -> (SoundType) SoundEvents.ZOGLIN_AMBIENT)
            .registerSupplier(SoundType.class, "entity.zoglin.angry", () -> (SoundType) SoundEvents.ZOGLIN_ANGRY)
            .registerSupplier(SoundType.class, "entity.zoglin.attack", () -> (SoundType) SoundEvents.ZOGLIN_ATTACK)
            .registerSupplier(SoundType.class, "entity.zoglin.death", () -> (SoundType) SoundEvents.ZOGLIN_DEATH)
            .registerSupplier(SoundType.class, "entity.zoglin.hurt", () -> (SoundType) SoundEvents.ZOGLIN_HURT)
            .registerSupplier(SoundType.class, "entity.zoglin.step", () -> (SoundType) SoundEvents.ZOGLIN_STEP)
            .registerSupplier(SoundType.class, "entity.zombie.ambient", () -> (SoundType) SoundEvents.ZOMBIE_AMBIENT)
            .registerSupplier(SoundType.class, "entity.zombie.attack_iron_door", () -> (SoundType) SoundEvents.ZOMBIE_ATTACK_IRON_DOOR)
            .registerSupplier(SoundType.class, "entity.zombie.attack_wooden_door", () -> (SoundType) SoundEvents.ZOMBIE_ATTACK_WOODEN_DOOR)
            .registerSupplier(SoundType.class, "entity.zombie.break_wooden_door", () -> (SoundType) SoundEvents.ZOMBIE_BREAK_WOODEN_DOOR)
            .registerSupplier(SoundType.class, "entity.zombie.converted_to_drowned", () -> (SoundType) SoundEvents.ZOMBIE_CONVERTED_TO_DROWNED)
            .registerSupplier(SoundType.class, "entity.zombie.death", () -> (SoundType) SoundEvents.ZOMBIE_DEATH)
            .registerSupplier(SoundType.class, "entity.zombie.destroy_egg", () -> (SoundType) SoundEvents.ZOMBIE_DESTROY_EGG)
            .registerSupplier(SoundType.class, "entity.zombie.hurt", () -> (SoundType) SoundEvents.ZOMBIE_HURT)
            .registerSupplier(SoundType.class, "entity.zombie.infect", () -> (SoundType) SoundEvents.ZOMBIE_INFECT)
            .registerSupplier(SoundType.class, "entity.zombie.step", () -> (SoundType) SoundEvents.ZOMBIE_STEP)
            .registerSupplier(SoundType.class, "entity.zombie_horse.ambient", () -> (SoundType) SoundEvents.ZOMBIE_HORSE_AMBIENT)
            .registerSupplier(SoundType.class, "entity.zombie_horse.death", () -> (SoundType) SoundEvents.ZOMBIE_HORSE_DEATH)
            .registerSupplier(SoundType.class, "entity.zombie_horse.hurt", () -> (SoundType) SoundEvents.ZOMBIE_HORSE_HURT)
            .registerSupplier(SoundType.class, "entity.zombie_villager.ambient", () -> (SoundType) SoundEvents.ZOMBIE_VILLAGER_AMBIENT)
            .registerSupplier(SoundType.class, "entity.zombie_villager.converted", () -> (SoundType) SoundEvents.ZOMBIE_VILLAGER_CONVERTED)
            .registerSupplier(SoundType.class, "entity.zombie_villager.cure", () -> (SoundType) SoundEvents.ZOMBIE_VILLAGER_CURE)
            .registerSupplier(SoundType.class, "entity.zombie_villager.death", () -> (SoundType) SoundEvents.ZOMBIE_VILLAGER_DEATH)
            .registerSupplier(SoundType.class, "entity.zombie_villager.hurt", () -> (SoundType) SoundEvents.ZOMBIE_VILLAGER_HURT)
            .registerSupplier(SoundType.class, "entity.zombie_villager.step", () -> (SoundType) SoundEvents.ZOMBIE_VILLAGER_STEP)
            .registerSupplier(SoundType.class, "entity.zombified_piglin.ambient", () -> (SoundType) SoundEvents.ZOMBIFIED_PIGLIN_AMBIENT)
            .registerSupplier(SoundType.class, "entity.zombified_piglin.angry", () -> (SoundType) SoundEvents.ZOMBIFIED_PIGLIN_ANGRY)
            .registerSupplier(SoundType.class, "entity.zombified_piglin.death", () -> (SoundType) SoundEvents.ZOMBIFIED_PIGLIN_DEATH)
            .registerSupplier(SoundType.class, "entity.zombified_piglin.hurt", () -> (SoundType) SoundEvents.ZOMBIFIED_PIGLIN_HURT)
            .registerSupplier(SoundType.class, "event.raid.horn", () -> (SoundType) SoundEvents.RAID_HORN)
            .registerSupplier(SoundType.class, "item.armor.equip_chain", () -> (SoundType) SoundEvents.ARMOR_EQUIP_CHAIN)
            .registerSupplier(SoundType.class, "item.armor.equip_diamond", () -> (SoundType) SoundEvents.ARMOR_EQUIP_DIAMOND)
            .registerSupplier(SoundType.class, "item.armor.equip_elytra", () -> (SoundType) SoundEvents.ARMOR_EQUIP_ELYTRA)
            .registerSupplier(SoundType.class, "item.armor.equip_generic", () -> (SoundType) SoundEvents.ARMOR_EQUIP_GENERIC)
            .registerSupplier(SoundType.class, "item.armor.equip_gold", () -> (SoundType) SoundEvents.ARMOR_EQUIP_GOLD)
            .registerSupplier(SoundType.class, "item.armor.equip_iron", () -> (SoundType) SoundEvents.ARMOR_EQUIP_IRON)
            .registerSupplier(SoundType.class, "item.armor.equip_leather", () -> (SoundType) SoundEvents.ARMOR_EQUIP_LEATHER)
            .registerSupplier(SoundType.class, "item.armor.equip_netherite", () -> (SoundType) SoundEvents.ARMOR_EQUIP_NETHERITE)
            .registerSupplier(SoundType.class, "item.armor.equip_turtle", () -> (SoundType) SoundEvents.ARMOR_EQUIP_TURTLE)
            .registerSupplier(SoundType.class, "item.axe.strip", () -> (SoundType) SoundEvents.AXE_STRIP)
            .registerSupplier(SoundType.class, "item.book.page_turn", () -> (SoundType) SoundEvents.BOOK_PAGE_TURN)
            .registerSupplier(SoundType.class, "item.book.put", () -> (SoundType) SoundEvents.BOOK_PUT)
            .registerSupplier(SoundType.class, "item.bottle.empty", () -> (SoundType) SoundEvents.BOTTLE_EMPTY)
            .registerSupplier(SoundType.class, "item.bottle.fill", () -> (SoundType) SoundEvents.BOTTLE_FILL)
            .registerSupplier(SoundType.class, "item.bottle.fill_dragonbreath", () -> (SoundType) SoundEvents.BOTTLE_FILL_DRAGONBREATH)
            .registerSupplier(SoundType.class, "item.bucket.empty", () -> (SoundType) SoundEvents.BUCKET_EMPTY)
            .registerSupplier(SoundType.class, "item.bucket.empty_fish", () -> (SoundType) SoundEvents.BUCKET_EMPTY_FISH)
            .registerSupplier(SoundType.class, "item.bucket.empty_lava", () -> (SoundType) SoundEvents.BUCKET_EMPTY_LAVA)
            .registerSupplier(SoundType.class, "item.bucket.fill", () -> (SoundType) SoundEvents.BUCKET_FILL)
            .registerSupplier(SoundType.class, "item.bucket.fill_fish", () -> (SoundType) SoundEvents.BUCKET_FILL_FISH)
            .registerSupplier(SoundType.class, "item.bucket.fill_lava", () -> (SoundType) SoundEvents.BUCKET_FILL_LAVA)
            .registerSupplier(SoundType.class, "item.chorus_fruit.teleport", () -> (SoundType) SoundEvents.CHORUS_FRUIT_TELEPORT)
            .registerSupplier(SoundType.class, "item.crop.plant", () -> (SoundType) SoundEvents.CROP_PLANTED)
            .registerSupplier(SoundType.class, "item.crossbow.hit", () -> (SoundType) SoundEvents.CROSSBOW_HIT)
            .registerSupplier(SoundType.class, "item.crossbow.loading_end", () -> (SoundType) SoundEvents.CROSSBOW_LOADING_END)
            .registerSupplier(SoundType.class, "item.crossbow.loading_middle", () -> (SoundType) SoundEvents.CROSSBOW_LOADING_MIDDLE)
            .registerSupplier(SoundType.class, "item.crossbow.loading_start", () -> (SoundType) SoundEvents.CROSSBOW_LOADING_START)
            .registerSupplier(SoundType.class, "item.crossbow.quick_charge_1", () -> (SoundType) SoundEvents.CROSSBOW_QUICK_CHARGE_1)
            .registerSupplier(SoundType.class, "item.crossbow.quick_charge_2", () -> (SoundType) SoundEvents.CROSSBOW_QUICK_CHARGE_2)
            .registerSupplier(SoundType.class, "item.crossbow.quick_charge_3", () -> (SoundType) SoundEvents.CROSSBOW_QUICK_CHARGE_3)
            .registerSupplier(SoundType.class, "item.crossbow.shoot", () -> (SoundType) SoundEvents.CROSSBOW_SHOOT)
            .registerSupplier(SoundType.class, "item.elytra.flying", () -> (SoundType) SoundEvents.ELYTRA_FLYING)
            .registerSupplier(SoundType.class, "item.firecharge.use", () -> (SoundType) SoundEvents.FIRECHARGE_USE)
            .registerSupplier(SoundType.class, "item.flintandsteel.use", () -> (SoundType) SoundEvents.FLINTANDSTEEL_USE)
            .registerSupplier(SoundType.class, "item.hoe.till", () -> (SoundType) SoundEvents.HOE_TILL)
            .registerSupplier(SoundType.class, "item.honey_bottle.drink", () -> (SoundType) SoundEvents.HONEY_DRINK)
            .registerSupplier(SoundType.class, "item.lodestone_compass.lock", () -> (SoundType) SoundEvents.LODESTONE_COMPASS_LOCK)
            .registerSupplier(SoundType.class, "item.nether_wart.plant", () -> (SoundType) SoundEvents.NETHER_WART_PLANTED)
            .registerSupplier(SoundType.class, "item.shield.block", () -> (SoundType) SoundEvents.SHIELD_BLOCK)
            .registerSupplier(SoundType.class, "item.shield.break", () -> (SoundType) SoundEvents.SHIELD_BREAK)
            .registerSupplier(SoundType.class, "item.shovel.flatten", () -> (SoundType) SoundEvents.SHOVEL_FLATTEN)
            .registerSupplier(SoundType.class, "item.sweet_berries.pick_from_bush", () -> (SoundType) SoundEvents.SWEET_BERRY_BUSH_PICK_BERRIES)
            .registerSupplier(SoundType.class, "item.totem.use", () -> (SoundType) SoundEvents.TOTEM_USE)
            .registerSupplier(SoundType.class, "item.trident.hit", () -> (SoundType) SoundEvents.TRIDENT_HIT)
            .registerSupplier(SoundType.class, "item.trident.hit_ground", () -> (SoundType) SoundEvents.TRIDENT_HIT_GROUND)
            .registerSupplier(SoundType.class, "item.trident.return", () -> (SoundType) SoundEvents.TRIDENT_RETURN)
            .registerSupplier(SoundType.class, "item.trident.riptide_1", () -> (SoundType) SoundEvents.TRIDENT_RIPTIDE_1)
            .registerSupplier(SoundType.class, "item.trident.riptide_2", () -> (SoundType) SoundEvents.TRIDENT_RIPTIDE_2)
            .registerSupplier(SoundType.class, "item.trident.riptide_3", () -> (SoundType) SoundEvents.TRIDENT_RIPTIDE_3)
            .registerSupplier(SoundType.class, "item.trident.throw", () -> (SoundType) SoundEvents.TRIDENT_THROW)
            .registerSupplier(SoundType.class, "item.trident.thunder", () -> (SoundType) SoundEvents.TRIDENT_THUNDER)
            .registerSupplier(SoundType.class, "music.creative", () -> (SoundType) SoundEvents.MUSIC_CREATIVE)
            .registerSupplier(SoundType.class, "music.credits", () -> (SoundType) SoundEvents.MUSIC_CREDITS)
            .registerSupplier(SoundType.class, "music.dragon", () -> (SoundType) SoundEvents.MUSIC_DRAGON)
            .registerSupplier(SoundType.class, "music.end", () -> (SoundType) SoundEvents.MUSIC_END)
            .registerSupplier(SoundType.class, "music.game", () -> (SoundType) SoundEvents.MUSIC_GAME)
            .registerSupplier(SoundType.class, "music.menu", () -> (SoundType) SoundEvents.MUSIC_MENU)
            .registerSupplier(SoundType.class, "music.nether.basalt_deltas", () -> (SoundType) SoundEvents.MUSIC_BIOME_BASALT_DELTAS)
            .registerSupplier(SoundType.class, "music.nether.crimson_forest", () -> (SoundType) SoundEvents.MUSIC_BIOME_CRIMSON_FOREST)
            .registerSupplier(SoundType.class, "music.nether.nether_wastes", () -> (SoundType) SoundEvents.MUSIC_BIOME_NETHER_WASTES)
            .registerSupplier(SoundType.class, "music.nether.soul_sand_valley", () -> (SoundType) SoundEvents.MUSIC_BIOME_SOUL_SAND_VALLEY)
            .registerSupplier(SoundType.class, "music.nether.warped_forest", () -> (SoundType) SoundEvents.MUSIC_BIOME_WARPED_FOREST)
            .registerSupplier(SoundType.class, "music.under_water", () -> (SoundType) SoundEvents.MUSIC_UNDER_WATER)
            .registerSupplier(SoundType.class, "music_disc.11", () -> (SoundType) SoundEvents.MUSIC_DISC_11)
            .registerSupplier(SoundType.class, "music_disc.13", () -> (SoundType) SoundEvents.MUSIC_DISC_13)
            .registerSupplier(SoundType.class, "music_disc.blocks", () -> (SoundType) SoundEvents.MUSIC_DISC_BLOCKS)
            .registerSupplier(SoundType.class, "music_disc.cat", () -> (SoundType) SoundEvents.MUSIC_DISC_CAT)
            .registerSupplier(SoundType.class, "music_disc.chirp", () -> (SoundType) SoundEvents.MUSIC_DISC_CHIRP)
            .registerSupplier(SoundType.class, "music_disc.far", () -> (SoundType) SoundEvents.MUSIC_DISC_FAR)
            .registerSupplier(SoundType.class, "music_disc.mall", () -> (SoundType) SoundEvents.MUSIC_DISC_MALL)
            .registerSupplier(SoundType.class, "music_disc.mellohi", () -> (SoundType) SoundEvents.MUSIC_DISC_MELLOHI)
            .registerSupplier(SoundType.class, "music_disc.pigstep", () -> (SoundType) SoundEvents.MUSIC_DISC_PIGSTEP)
            .registerSupplier(SoundType.class, "music_disc.stal", () -> (SoundType) SoundEvents.MUSIC_DISC_STAL)
            .registerSupplier(SoundType.class, "music_disc.strad", () -> (SoundType) SoundEvents.MUSIC_DISC_STRAD)
            .registerSupplier(SoundType.class, "music_disc.wait", () -> (SoundType) SoundEvents.MUSIC_DISC_WAIT)
            .registerSupplier(SoundType.class, "music_disc.ward", () -> (SoundType) SoundEvents.MUSIC_DISC_WARD)
            .registerSupplier(SoundType.class, "particle.soul_escape", () -> (SoundType) SoundEvents.SOUL_ESCAPE)
            .registerSupplier(SoundType.class, "ui.button.click", () -> (SoundType) SoundEvents.UI_BUTTON_CLICK)
            .registerSupplier(SoundType.class, "ui.cartography_table.take_result", () -> (SoundType) SoundEvents.UI_CARTOGRAPHY_TABLE_TAKE_RESULT)
            .registerSupplier(SoundType.class, "ui.loom.select_pattern", () -> (SoundType) SoundEvents.UI_LOOM_SELECT_PATTERN)
            .registerSupplier(SoundType.class, "ui.loom.take_result", () -> (SoundType) SoundEvents.UI_LOOM_TAKE_RESULT)
            .registerSupplier(SoundType.class, "ui.stonecutter.select_recipe", () -> (SoundType) SoundEvents.UI_STONECUTTER_SELECT_RECIPE)
            .registerSupplier(SoundType.class, "ui.stonecutter.take_result", () -> (SoundType) SoundEvents.UI_STONECUTTER_TAKE_RESULT)
            .registerSupplier(SoundType.class, "ui.toast.challenge_complete", () -> (SoundType) SoundEvents.UI_TOAST_CHALLENGE_COMPLETE)
            .registerSupplier(SoundType.class, "ui.toast.in", () -> (SoundType) SoundEvents.UI_TOAST_IN)
            .registerSupplier(SoundType.class, "ui.toast.out", () -> (SoundType) SoundEvents.UI_TOAST_OUT)
            .registerSupplier(SoundType.class, "weather.rain", () -> (SoundType) SoundEvents.WEATHER_RAIN)
            .registerSupplier(SoundType.class, "weather.rain.above", () -> (SoundType) SoundEvents.WEATHER_RAIN_ABOVE)

        ;
    }
}
